<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js的new到底干了什么，如何手写一个new</title>
    <link href="/2021/07/29/js%E7%9A%84new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88,%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2021/07/29/js%E7%9A%84new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88,%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>let arr = new Array() 到底内部发生了什么? js 中的实例是如何创建出来的？它和 Object.create() 区别是什么？</p><span id="more"></span><h3 id="原型链说起"><a href="#原型链说起" class="headerlink" title="原型链说起"></a>原型链说起</h3><blockquote><p>每个实例对象（object）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的<strong>构造函数的原型对象</strong>（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">this</span>.b = <span class="hljs-number">2</span>;<br>&#125;;<br>f.prototype.b = <span class="hljs-number">3</span>;<br>f.prototype.c = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> f();<br><br><span class="hljs-built_in">console</span>.log(o.__proto__ === f.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 私有属性 __proto__ 指向了构造函数的原型对象</span><br><br><span class="hljs-built_in">console</span>.log(o.a); <span class="hljs-comment">//  1</span><br><span class="hljs-comment">// a是o的自身属性吗？是的，该属性的值为 1</span><br><br><span class="hljs-built_in">console</span>.log(o.b);<br><span class="hljs-comment">// b是o的自身属性吗？是的，该属性的值为 2</span><br><span class="hljs-comment">// 原型上也有一个&#x27;b&#x27;属性，但是它不会被访问到。</span><br><span class="hljs-comment">// 这种情况被称为&quot;属性遮蔽 (property shadowing)&quot;</span><br><br><span class="hljs-built_in">console</span>.log(o.c); <span class="hljs-comment">// 4</span><br><span class="hljs-comment">// c是o的自身属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4</span><br><br><span class="hljs-built_in">console</span>.log(o.d); <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// d 是 o 的自身属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// o.[[Prototype]].[[Prototype]] 为 null，停止搜索</span><br><span class="hljs-comment">// 找不到 d 属性，返回 undefined</span><br></code></pre></td></tr></table></figure><h3 id="new-内部发生了什么？原型链如何指向？"><a href="#new-内部发生了什么？原型链如何指向？" class="headerlink" title="new 内部发生了什么？原型链如何指向？"></a>new 内部发生了什么？原型链如何指向？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">this</span>.b = <span class="hljs-number">2</span>;<br>&#125;;<br>f.prototype.b = <span class="hljs-number">3</span>;<br>f.prototype.c = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> f();<br><span class="hljs-built_in">console</span>.log(o);<br><span class="hljs-comment">// o 为新创建的空对象，它的 __proto__ 指向 f.prototype</span><br><span class="hljs-comment">// o.__proto__  === f.prototype   // true</span><br></code></pre></td></tr></table></figure><h4 id="new-和-Object-create-有什么区别？"><a href="#new-和-Object-create-有什么区别？" class="headerlink" title="new 和 Object.create() 有什么区别？"></a>new 和 Object.create() 有什么区别？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">this</span>.f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(f);<br>    &#125;;<br>&#125;;<br><br><span class="hljs-keyword">let</span> createFn = <span class="hljs-built_in">Object</span>.create(fn);<br><span class="hljs-comment">// createFn 的原型 指向 传入的 fn 的地址</span><br><span class="hljs-built_in">console</span>.log(createFn.__proto__);<br><span class="hljs-comment">// VM513:1 ƒ () &#123;</span><br><span class="hljs-comment">//     this.a = 1;</span><br><span class="hljs-comment">//     this.f = function () &#123;</span><br><span class="hljs-comment">//         console.log(f);</span><br><span class="hljs-comment">//     &#125;;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-built_in">console</span>.log(createFn.__proto__ === fn); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(createFn.constructor === fn.constructor); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(createFn.constructor === fn.prototype.constructor); <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> newFn = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(newFn.__proto__ === fn.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(newFn.constructor === fn.constructor); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(newFn.constructor === fn.prototype.constructor); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="对比-create-和-new-得知"><a href="#对比-create-和-new-得知" class="headerlink" title="对比 create 和 new 得知"></a>对比 create 和 new 得知</h5><ul><li>  create</li><li><ul><li>  <code>createFn.__proto__</code> === fn</li></ul></li><li><ul><li>  <code>createFn.constructor</code> === fn.constructor</li></ul></li><li>  new</li><li><ul><li>  <code>newFn.__proto__</code> === fn.prototype</li></ul></li><li><ul><li>  <code>newFn.constructor</code> === fn.prototype.constructor</li></ul></li></ul><p>也就是 create 的对象他的原型链都是指向 fn 本体的。而 new 的对象 都是指向 fn.prototype</p><h3 id="fn-constructor-和-fn-prototype-constructor-有什么关系"><a href="#fn-constructor-和-fn-prototype-constructor-有什么关系" class="headerlink" title="fn.constructor 和 fn.prototype.constructor 有什么关系"></a>fn.constructor 和 fn.prototype.constructor 有什么关系</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 还是这个栗子</span><br><span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">this</span>.f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(f);<br>    &#125;;<br>&#125;;<br><span class="hljs-built_in">console</span>.log(fn.prototype.constructor === fn); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(fn.constructor === <span class="hljs-built_in">Function</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>由上可知</p><ul><li>  一个对象的 fn.constructor 是指向其父类本体的</li><li>  一个对象的 fn.prototype.constructor 是指向本体的</li></ul><p>一张图就能明白：<br><img src="/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js中的栈都能干什么</title>
    <link href="/2020/03/29/js%E4%B8%AD%E7%9A%84%E6%A0%88%E9%83%BD%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88/"/>
    <url>/2020/03/29/js%E4%B8%AD%E7%9A%84%E6%A0%88%E9%83%BD%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>阅读《数据结构与算法.javascript 描述》做的一点笔记</p><span id="more"></span><h3 id="js-栈的实现"><a href="#js-栈的实现" class="headerlink" title="js 栈的实现"></a>js 栈的实现</h3><figure class="highlight javascript"><figcaption><span>index.js</span><a href="/code/stack/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Stack</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">this</span>.dataSource = [];<br>    <span class="hljs-built_in">this</span>.top = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.push = push;<br>    <span class="hljs-built_in">this</span>.pop = pop;<br>    <span class="hljs-built_in">this</span>.len = len;<br>    <span class="hljs-built_in">this</span>.peek = peek;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">push</span>(<span class="hljs-params">element</span>) </span>{<br>    <span class="hljs-built_in">this</span>.dataSource[<span class="hljs-built_in">this</span>.top++] = element;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pop</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dataSource[--<span class="hljs-built_in">this</span>.top];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">peek</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dataSource[<span class="hljs-built_in">this</span>.top - <span class="hljs-number">1</span>];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clear</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">this</span>.top = <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">len</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.top;<br>}<br><br><span class="hljs-comment">// 进制转换</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params">num, base</span>) </span>{<br>    <span class="hljs-keyword">var</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">var</span> res = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">do</span> {<br>        stack.push(num % base);<br>        num = <span class="hljs-built_in">Math</span>.floor(num / base);<br>    } <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (stack.len() &gt; <span class="hljs-number">0</span>) {<br>        res += stack.pop();<br>    }<br>    <span class="hljs-keyword">return</span> res;<br>}<br><span class="hljs-comment">// console.log(convert(10, 2)) // 1010</span><br><br><span class="hljs-comment">// 表达式匹配  如：2+500-(451-100  匹配缺失的括号位置</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params">reg</span>) </span>{<br>    <span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> _reg = reg.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; _reg.length; index++) {<br>        <span class="hljs-keyword">const</span> element = _reg[index];<br>        <span class="hljs-keyword">switch</span> (element) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;{&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;}&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;{&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;[&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;(&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;无错误&#x27;</span>);<br>}<br><span class="hljs-comment">// let reg = &quot;1+2*[(5-1+]5)&quot;</span><br><span class="hljs-comment">// format(reg)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  一个算数表达式的后缀如下：</span><br><span class="hljs-comment"> *  op1 op2 operator</span><br><span class="hljs-comment"> *  设计一个函数将中缀表达式转换为后缀表达式，然后利用栈对该表达式求值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOpPriority</span>(<span class="hljs-params">op</span>) </span>{<br>    <span class="hljs-keyword">switch</span> (op) {<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params">reg</span>) </span>{<br>    <span class="hljs-keyword">let</span> numStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> opStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> _reg = reg.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">let</span> regChange = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; _reg.length; index++) {<br>        <span class="hljs-keyword">let</span> element = _reg[index].trim();<br>        <span class="hljs-keyword">if</span> (element &amp;&amp; !<span class="hljs-built_in">isNaN</span>(element)) {<br>            <span class="hljs-comment">// 如果是数字 进入数字栈</span><br>            numStack.push(element);<br>            regChange += element;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">// 如果是符号 则进入符号栈</span><br>            regChange += element;<br>            <span class="hljs-keyword">if</span> (getOpPriority(element)) {<br>            }<br>            opStack.push(element);<br>        }<br>    }<br>    <span class="hljs-built_in">console</span>.log(regChange);<br>}<br><span class="hljs-keyword">let</span> reg = <span class="hljs-string">&#x27;1+(2-3)+5*7&#x27;</span>;<br><span class="hljs-comment">/**  57*123-++</span><br><span class="hljs-comment"> * 5    /</span><br><span class="hljs-comment"> * 4    *</span><br><span class="hljs-comment"> * 3    )</span><br><span class="hljs-comment"> * 2    -</span><br><span class="hljs-comment"> * 1    )</span><br><span class="hljs-comment"> *      +</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// change(reg);</span><br><br><span class="hljs-comment">// 一盒糖果，里面有红(1)黄(2)白(3)三种糖果， 在不改变其他糖果叠放顺序的情况下，将黄色糖果移除</span><br><span class="hljs-keyword">let</span> suger = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeSuger</span>(<span class="hljs-params">list</span>) </span>{<br>    <span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = list.length - <span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--) {<br>        <span class="hljs-keyword">const</span> element = list[index];<br>        <span class="hljs-keyword">if</span> (element !== <span class="hljs-number">2</span>) {<br>            stack.push(element);<br>        }<br>    }<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">do</span> {<br>        arr.push(stack.pop());<br>    } <span class="hljs-keyword">while</span> (stack.len() &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> arr;<br>}<br><span class="hljs-keyword">let</span> res = removeSuger(suger);<br><span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>babel入门</title>
    <link href="/2020/01/03/babel%E5%85%A5%E9%97%A8/"/>
    <url>/2020/01/03/babel%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的 <a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">《Babel 入门教程》</a>的教程所做的一些个人总结和思考</p><span id="more"></span><p>babel已经成为前端开发的基础依赖。so 借助阮大神的教程学习一下。目前babel已经更新到7.0并改包名为@babel。</p><h4 id="babel功能"><a href="#babel功能" class="headerlink" title="babel功能"></a>babel功能</h4><p>平时我们用ES5+编写代码，但是浏览器和node环境还不完全支持最新的语法（如最常见的箭头函数）。那么babel作为一个编译器的角色将我们的代码再次转换为环境所能识别的代码。</p><h4 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h4><p>babelrc 是babel的配置文件，babel如何转换代码，包括支持哪些语法全由这个配置文件决定！</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [],  &lt;===== 配置你的转码规则集合<br>  <span class="hljs-string">&quot;plugins&quot;</span>: []   &lt;===== 根据插件配置你的转码规则<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="babel-config-js和-babelrc的区别"><a href="#babel-config-js和-babelrc的区别" class="headerlink" title="babel.config.js和.babelrc的区别"></a>babel.config.js和.babelrc的区别</h5><p>babel.config.js 以编程的方式进行配置且会将node_modules的包也一同转换；<br>.babelrc 仅转换你的工程文件</p><p> 官方解释：</p><ul><li>You want to programmatically create the configuration?</li><li>You want to compile node_modules?</li></ul><blockquote><p>babel.config.js is for you! </p></blockquote><ul><li>You have a static configuration that only applies to your simple single package?</li></ul><blockquote><p>.babelrc is for you!</p></blockquote><h5 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h5><blockquote><p>官方解释：Babel is a compiler (source code =&gt; output code). Like many other compilers it runs in 3 stages: parsing, transforming, and printing.</p></blockquote><p>babel的插件一般会拆分成很小的粒度，可以按需引入</p><p>pulugins 是一个插件数组，你只需要按需配置你的插件用来制定你的代码该 如何解析，如何转换，如何输出你的代码。（当然大部分时候只需要无脑使用就行了，不需要太多配置）<br>如果有多个配置项，<strong>按顺序解析！！</strong></p><h5 id="preset"><a href="#preset" class="headerlink" title="preset"></a>preset</h5><p>由于 plugin 可以按需配置，但是过多的配置又让人心力憔悴，所以就有了preset<br>这个可以看作是一堆插件的集合。<br>如果有多个preset 为了向后兼容采用的 <strong>倒叙解析</strong></p><h5 id="presets与plugins-的顺序问题"><a href="#presets与plugins-的顺序问题" class="headerlink" title="presets与plugins 的顺序问题"></a>presets与plugins 的顺序问题</h5><p>再配置文件中的presets和plugins 会先执行 plugins的配置，再执行presets </p><pre><code>&#123;  &quot;plugins&quot;: [                    //按顺序先执行 plugins    &quot;transform-react-jsx&quot;,    &quot;transform-async-to-generator&quot;  ],  &quot;presets&quot;: [                    // 按倒叙再plugins执行完后执行    &quot;es2015&quot;,    &quot;es2016&quot;      ]&#125;</code></pre><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>babel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>babel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组解构赋值</title>
    <link href="/2019/12/31/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <url>/2019/12/31/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的《ECMAScript 6 入门》的教程所做的一些个人总结和思考</p><span id="more"></span><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p><h4 id="示例摘要"><a href="#示例摘要" class="headerlink" title="示例摘要"></a>示例摘要</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">let [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <br><br>let [head, ...tail] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>head <span class="hljs-regexp">//</span> <span class="hljs-number">1</span><br>tail <span class="hljs-regexp">//</span> [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>let [x, y, ...z] = [<span class="hljs-string">&#x27;a&#x27;</span>];<br>x <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;a&quot;</span><br>y <span class="hljs-regexp">//</span> undefined<br>z <span class="hljs-regexp">//</span> []   <span class="hljs-regexp">//</span>空数组<br></code></pre></td></tr></table></figure><p> set解构也可以用数组遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [a,b,c] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><blockquote><p>只要数据具有Iterator接口，均可以被解构</p></blockquote><h5 id="可使用默认值"><a href="#可使用默认值" class="headerlink" title="可使用默认值"></a>可使用默认值</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-keyword">let</span> [<span class="hljs-attr">a=123]=[undefined]</span><br>/// <span class="hljs-attr">a</span> = <span class="hljs-number">123</span><br><br><span class="hljs-keyword">let</span> [<span class="hljs-attr">x</span> =<span class="hljs-number">1</span> ]= [ undefined ]<br>// <span class="hljs-attr">x</span> = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> [ <span class="hljs-attr">x</span> = <span class="hljs-number">2</span>] = [<span class="hljs-literal">null</span>]<br>//<span class="hljs-attr">x</span> = <span class="hljs-literal">null</span> <br></code></pre></td></tr></table></figure><p>由于ES6中使用严格相等运算符(====)，所以只有元素严格等于undefined时才生效</p><ul><li> 惰性求值</li></ul><p>解构中如果默认的值是一个表达式，则在使用时才会执行。</p><ul><li> 对象解构</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">let &#123; foo: baz &#125; = &#123; foo: <span class="hljs-string">&#x27;aaa&#x27;</span>, bar: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br>baz <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;aaa&quot;</span><br><br>let obj = &#123; first: <span class="hljs-string">&#x27;hello&#x27;</span>, last: <span class="hljs-string">&#x27;world&#x27;</span> &#125;;<br>let &#123; first: f, last: l &#125; = obj;   <span class="hljs-regexp">//</span> 指定解构为新变量<br>f <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;hello&#x27;</span><br>l <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;world&#x27;</span><br></code></pre></td></tr></table></figure><p>上例对象解构中 foo为解构模式，baz为被赋值变量，即key为解构模式，value为目标变量。</p><p>这里可以使用ES6的新特性，简写为下面的情况，</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> &#123; <span class="hljs-built_in">log</span> &#125; = console<span class="hljs-comment">;     </span><br>// 完整写法 <span class="hljs-keyword">const</span> &#123; <span class="hljs-built_in">log</span>:<span class="hljs-built_in">log</span>&#125;=console<br><span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) // hello<br></code></pre></td></tr></table></figure><ul><li>注意：解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">prop</span>: x &#125; = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// TypeError</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">prop</span>: y &#125; = <span class="hljs-literal">null</span>; <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>解构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>let/const命令</title>
    <link href="/2019/12/30/let-const%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/12/30/let-const%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的《ECMAScript 6 入门》的教程所做的一些个人总结和思考</p><span id="more"></span><h3 id="let-const"><a href="#let-const" class="headerlink" title="let/const"></a>let/const</h3><h4 id="死区"><a href="#死区" class="headerlink" title="死区"></a>死区</h4><p>采用块级作用域，不存在<strong>变量提升</strong>，会产生暂时性<strong>死区</strong>。 ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  tmp = <span class="hljs-string">&#x27;abc&#x27;</span>; <span class="hljs-comment">// ReferenceError</span><br>  <span class="hljs-keyword">let</span> tmp; <span class="hljs-comment">// 在当前块作用域 tmp属于声明之前就使用 so 报错</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数声明不会提升"><a href="#函数声明不会提升" class="headerlink" title="函数声明不会提升"></a>函数声明不会提升</h4><p>由于为了兼容老代码，在支持 ES6 的浏览器中会有所修改</p><ul><li>  允许在块级作用域内声明函数。</li><li>  函数声明类似于 var，即会提升到全局作用域或函数作用域的头部。</li><li>  同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><h4 id="const-本质"><a href="#const-本质" class="headerlink" title="const 本质"></a>const 本质</h4><blockquote><p>const 实际上保证的，并不是变量的值不得改动，而是变量<strong>指向的内存地址</strong>所保存的数据不得改动。</p></blockquote><ul><li>  对于简单类型的数据（数值、字符串、布尔值）: 值就保存在变量指向的那个内存地址，因此等同于常量。</li><li>  但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>let</tag>
      
      <tag>const</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于webpack抽离配置文件的思考</title>
    <link href="/2019/12/23/%E5%85%B3%E4%BA%8Ewebpack%E6%8A%BD%E7%A6%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2019/12/23/%E5%85%B3%E4%BA%8Ewebpack%E6%8A%BD%E7%A6%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>大部分项目开发使用的环境和生产环境有较大差异，且前后端通过 API 进行通信，部署生产项目时必须大量修改配置重新打包。有时候可能仅仅是配置文件的微小改变却需要重新打包部署发布，对于我们本就心力憔悴的程序员来说又是一种折磨。so 我们需要一种更加便利的配置加载方式！</p><h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><blockquote><p>目标：分离出 prod 配置文件，同时保留 dev 的配置。根据 webpack 得 mode 字段判断当前环境。打包后在不同的环境自动使用不同的配置文件，同时在生产环境可以根据需求动态修改，无需重新打包部署</p></blockquote><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>在大量浏览网上的解决方案后，发现大致方法分为 3 种。</p><blockquote><ol><li>建立 globalConfig.json 文件用来存放配置，打包的时候分离出这个 json。在项目初始化的时候再异步加载该文件。</li></ol></blockquote><ul><li>  思考：个人认为是一种很不错的思路，但是如果个别项目前期初始化需要做大量的逻辑判断或多个异步操作，这个时候异步就显得有些难以控制了，必须用 async/await 将异步改为同步，需要前期做好规划。</li></ul><blockquote><ol start="2"><li>网上还有一种方式是通过 webpack 的 <a href="https://www.npmjs.com/package/generate-asset-webpack-plugin">generate-asset-webpack-plugin</a> 插件，在打包的时候读取一份 json 然后再重新生成一份配置文件。</li></ol></blockquote><ul><li>  思考：这种打包方式更能把 webpack 的能力发挥到极致，本想仔细研究的，但是由于小弟实在是没有找到这个插件的详细文档，且常年没有更新，貌似已经被抛弃了，因此有太多不确定性 so 放弃了种方式</li></ul><blockquote><ol start="3"><li>利用浏览器的 window 全局对象。先项目中建立一个 globalConfig.js，在打包时在 html 里先加载这个文件，将配置文件注入到 window 全局对象中。然后执行后面的初始化逻辑。</li></ol></blockquote><ul><li>  思考：目前来讲个人认为这是一个简单且可靠的方式。虽然大家都知道占用全局变量是一个不好的习惯，但毕竟是 API 配置文件其重要性不言而喻，so 占用一个全局变量也无伤大雅吧~</li></ul><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><blockquote><p>环境：使用 vue3，webpack4 未使用 vue-cli</p></blockquote><ul><li>  手写一个最基础的 webpack 配置，这里只设置了开发 dev 和生产环境 prod 两种配置，vue 能跑通就行~~ 重点是在打包时根据 process.env. NODE_ENV 判断应该使用 dev 还是 prod 的配置文件。在 build 生产环境时利用 copy-webpack-plugin 插件将 prodGlobalConfig.js 复制到 dist 下，然后再 html(需要使用简单的 ejs 语法)中加载即可</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── build<br>│   ├── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.base</span><span class="hljs-selector-class">.js</span><br>│   ├── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.dev</span><span class="hljs-selector-class">.js</span><br>│   └── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.prod</span><span class="hljs-selector-class">.js</span><br>├── package-lock<span class="hljs-selector-class">.json</span><br>├── package<span class="hljs-selector-class">.json</span><br>├── public<br>│   ├── devGlobalConfig<span class="hljs-selector-class">.js</span>  &lt;===你的开发环境config<br>│   ├── index<span class="hljs-selector-class">.html</span><br>│   └── prodGlobalConfig<span class="hljs-selector-class">.js</span> &lt;===正式环境config<br>└── <span class="hljs-attribute">src</span><br>    ├── App<span class="hljs-selector-class">.vue</span><br>    ├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span><br>    ├── store<br>    │   ├── config<span class="hljs-selector-class">.js</span><br>    │   └── index<span class="hljs-selector-class">.js</span><br>    └── utils<br>        └── getConfig<span class="hljs-selector-class">.js</span>   &lt;===定义根据环境获取配置的工具函数<br></code></pre></td></tr></table></figure><p>webpack.config.prod.js: 使用 CopyWebpackPlugin 将配置文件复制到打包目录</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.base.js&quot;</span>);<br><span class="hljs-keyword">const</span> marge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-merge&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> CopyWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;copy-webpack-plugin&quot;</span>);<br><br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = marge(common, &#123;<br>    mode: <span class="hljs-string">&quot;production&quot;</span>,<br>    output: &#123;<br>        filename: <span class="hljs-string">&quot;[name].[chunkhash].bundle.js&quot;</span><br>    &#125;,<br>    plugins: [<br>        <span class="hljs-keyword">new</span> CleanWebpackPlugin(),<br>        <span class="hljs-keyword">new</span> CopyWebpackPlugin([     &lt;== 将生产环境配置文件拷贝到最终的打包目录下<br>            &#123;<br>                context: path.resolve(__dirname,<span class="hljs-string">&#x27;..&#x27;</span>),<br>                from: <span class="hljs-string">&quot;./public/prodGlobalConfig.js&quot;</span>,<br>                to: <span class="hljs-string">&quot;.&quot;</span><br>            &#125;<br>        ])<br>    ]<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>prodGlobalConfig.js：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// 生产环境配置项</span><br><span class="hljs-keyword">window</span>.globalConfig = &#123;<br>    <span class="hljs-keyword">text</span>: <span class="hljs-string">&quot;prod&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>devGlobalConfig.js：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"> <span class="hljs-comment">// 开发环境</span><br><span class="hljs-keyword">const</span> devConfig = &#123;<br>    text: <span class="hljs-string">&quot;dev&quot;</span><br>&#125;;<br><span class="hljs-keyword">export</span> &#123; devConfig &#125;;<br></code></pre></td></tr></table></figure><p>getConfig.js：根据 process.env. NODE_ENV 判断当前所处的环境，返回不同的配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; devConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../public/devGlobalConfig&quot;</span>;<br><br><span class="hljs-keyword">const</span> getConfig = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.globalConfig;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> devConfig;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; getConfig &#125;;<br></code></pre></td></tr></table></figure><p>main.js： 简单处理。直接将配置文件写入根对象</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/getConfig&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br>Vue.prototype.globalConfig = getConfig();<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&quot;<span class="hljs-subst">#app</span>&quot;</span>,<br>    render: h =&gt; h(App)<br>&#125;);<br></code></pre></td></tr></table></figure><p>index.html：使用 ejs 语法判断所处环境，控制是否加载文件</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;%=</span><span class="ruby"> htmlWebpackPlugin.options.title </span><span class="xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 判断当前环境 --&gt;</span></span><br><span class="xml">        &lt;%</span><span class="ruby"> <span class="hljs-keyword">if</span>(process.env.NODE_ENV===<span class="hljs-string">&#x27;production&#x27;</span>)&#123;</span><span class="xml">%&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./prodGlobalConfig.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">        &lt;%</span><span class="ruby"> &#125;</span><span class="xml">%&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
