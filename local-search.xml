<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>http缓存</title>
    <link href="/2021/08/11/http%E7%BC%93%E5%AD%98/"/>
    <url>/2021/08/11/http%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>什么是 http 缓存 ? 强缓存和协商缓存区别是什么 ? Cache-Control / Last-Modified / If-Modified-Since / Etag / If-None-Match 分别是什么？</p><span id="more"></span><h3 id="重识-http-缓存"><a href="#重识-http-缓存" class="headerlink" title="重识 http 缓存"></a>重识 http 缓存</h3><p>首先 http 缓存其实<strong>并不是</strong>只有强缓存/协商缓存。 这两个缓存只是 <strong>(私有)浏览器缓存</strong> 的分类。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">参考 MDN</a></p><ul><li>http 缓存分类：<ul><li>(私有)浏览器缓存 : 私有缓存只能用于单独用户</li><li>(共享)代理缓存 : 共享缓存可以被多个用户使用 如 IPS/web 代理服务器</li></ul></li><li>缓存操作目标:<ul><li>一般为 get 请求</li></ul></li></ul><h3 id="缓存控制-http1-1-Cache-control-头"><a href="#缓存控制-http1-1-Cache-control-头" class="headerlink" title="缓存控制 (http1.1:Cache-control 头 )"></a>缓存控制 (http1.1:Cache-control 头 )</h3><blockquote><p>Cache-Control: no-store 没有缓存 -&gt; 每次由客户端发起的请求都会下载完整的响应内容</p></blockquote><blockquote><p>Cache-Control: no-cache 缓存但每次重新验证 -&gt; 有请求发出到服务器(会带上于缓存相关的验证字段), 服务器会验证, 若未过期则返回 304</p></blockquote><blockquote><p>Cache-Control: public 公有缓存 即：(共享)代理缓存-&gt; 可被任何中间人缓存(cdn/代理服务器等)</p></blockquote><blockquote><p>Cache-Control: private 私有缓存 即：(私有)浏览器缓存 -&gt; 中间人无法缓存(如 带有 HTTP 验证信息（帐号密码）的页面)</p></blockquote><blockquote><p>Cache-Control: max-age=N 表示资源能够被缓存（保持新鲜）的最大时间-&gt; max-age 是距离请求发起的时间的秒数。 需要与第一次请求 response 的 age(表示距离上一次有效请求的接收时间 ) 配合判断 .一般用于静态资源</p></blockquote><blockquote><p>Cache-Control: must-revalidate 必须验证 -&gt; 意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。</p></blockquote><h3 id="新鲜度保持"><a href="#新鲜度保持" class="headerlink" title="新鲜度保持"></a>新鲜度保持</h3><h4 id="强缓存阶段-返回-200-from-disk-memory-触发条件：在-URI-输入栏中输入然后回车-通过书签访问"><a href="#强缓存阶段-返回-200-from-disk-memory-触发条件：在-URI-输入栏中输入然后回车-通过书签访问" class="headerlink" title="强缓存阶段:返回 200 from disk/memory (触发条件：在 URI 输入栏中输入然后回车/通过书签访问)"></a>强缓存阶段:返回 200 from disk/memory (触发条件：在 URI 输入栏中输入然后回车/通过书签访问)</h4><p>0.发起请求 判断 max-age &gt; age 则使用缓存。否则开始 协商缓存阶段</p><h4 id="进入协商缓存-返回-304"><a href="#进入协商缓存-返回-304" class="headerlink" title="进入协商缓存:返回 304"></a>进入协商缓存:返回 304</h4><p>1.当客户端发起一个请求时，缓存检索到对应的陈旧资源（ max-age 已经过期），则缓存会先将此请求附加一个 If-None-Match 头(这是浏览器第一次请求 <strong>response</strong> 的 <strong>Etag</strong> 资源标识)，然后发给服务器,检查该资源副本是否是依然还是算新鲜的,若返回 304（无实体信息） 则表示是新鲜的，重置 age = 0</p><p>2.如果没有 max-age 则会找 Expires (上一次有效请求的 response 里的) 的值 和 当前 Date 来判断（http1.0 的方法）</p><p>3.若以上两个都没有 则使用 If-Modified-Since (上一次有效请求的 response 里的 Last-Modified ) ，重新计算 max-age。</p><p>max-age = (Date - Last-Modified ) * 10%</p><p><img src="/images/%E7%BC%93%E5%AD%98%E6%B5%81%E7%A8%8B.png" alt="缓存执行流程"></p><h3 id="点击刷新事件"><a href="#点击刷新事件" class="headerlink" title="点击刷新事件"></a>点击刷新事件</h3><p>当用户点击刷新时如果 head 里面含有 <code>Cache-control: must-revalidate</code> 则也会触发缓存验证</p><h3 id="Vary-验证"><a href="#Vary-验证" class="headerlink" title="Vary 验证"></a>Vary 验证</h3><p>Vary HTTP <strong>响应头</strong>决定了对于后续的<strong>请求头</strong>，如何判断是请求一个新的资源还是使用缓存的文件。</p><blockquote><p>通常用于区分移动端和桌面端的展示内容</p></blockquote><p><img src="/images/vary.png" alt="vary 验证流程"></p><h3 id="改进资源策略-非-http-缓存知识点"><a href="#改进资源策略-非-http-缓存知识点" class="headerlink" title="改进资源策略( 非 http 缓存知识点)"></a>改进资源策略( 非 http 缓存知识点)</h3><p>除了以上的 http 缓存，目前还流行一种改进资源策略的方式来验证缓存。<br>即：验证打包工具 build 时产生的 tag (如配置 webpack.output 的 filename ) 来验证资源是否有更新（通常用于静态资源）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>this的指向问题</title>
    <link href="/2021/08/05/this%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <url>/2021/08/05/this%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>关于 this 的指向一直是一个迷,<br>(这里摘至)[<a href="https://juejin.cn/post/6844903891092389901]">https://juejin.cn/post/6844903891092389901]</a></p><span id="more"></span><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><ul><li>默认绑定一般发生在回调函数,函数直接调用;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 严格模式下是 undefined</span><br>  <span class="hljs-comment">// 非严格模式下是 window</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-comment">//setTimeout的比较特殊</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//严格模式和非严格模式下都是window</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;);<br><br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//严格模式下是undefined</span><br>  <span class="hljs-comment">//非严格模式下是window</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h2><ul><li>这个通俗点用一句话概括就是谁调用就是指向谁</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;joy&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//obj</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">//joy</span><br>  &#125;,<br>&#125;;<br>obj.getName();<br></code></pre></td></tr></table></figure><h2 id="显示绑定-call-apply-bind"><a href="#显示绑定-call-apply-bind" class="headerlink" title="显示绑定 call,apply,bind"></a>显示绑定 call,apply,bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;joy&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sam&#x27;</span>,<br>&#125;;<br><br>obj1.getName.call(obj2); <span class="hljs-comment">//obj2 sam</span><br>obj1.getName.apply(obj2); <span class="hljs-comment">//obj2 sam</span><br><span class="hljs-keyword">const</span> fn = obj1.getName.bind(obj2);<br>fn(); <span class="hljs-comment">//obj2 sam</span><br></code></pre></td></tr></table></figure><h2 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Vehicle</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">new</span> Vehicle(); <span class="hljs-comment">//this指向Vehicle这个new出来的对象</span><br></code></pre></td></tr></table></figure><h2 id="es6-的箭头函数"><a href="#es6-的箭头函数" class="headerlink" title="es6 的箭头函数"></a>es6 的箭头函数</h2><ul><li>es6 的箭头函数比较特殊,箭头函数 this 为父作用域的 this，不是调用时的 this.</li><li>要知道前四种方式,都是调用时确定,也就是动态的,而箭头函数的 this 指向是静态的,声明的时候就确定了下来.比较符合 js 的词法作用域吧</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.name = <span class="hljs-string">&#x27;win&#x27;</span>;<br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;joy&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>  <span class="hljs-attr">getName</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//其父作用域this是window,所以就是window</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">//win</span><br>  &#125;,<br>  <span class="hljs-attr">getAge</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//通过obj.getAge调用,这里面this是指向obj</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">//所以这里this也是指向obj 所以结果是12</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>    &#125;);<br>  &#125;,<br>&#125;;<br>obj.getName();<br>obj.getAge();<br></code></pre></td></tr></table></figure><h2 id="5-种-this-绑定的优先级"><a href="#5-种-this-绑定的优先级" class="headerlink" title="5 种 this 绑定的优先级"></a>5 种 this 绑定的优先级</h2><blockquote><p>箭头函数 -&gt; new 绑定 -&gt; 显示绑定 call/bind/apply -&gt; 隐式绑定 -&gt; 默认绑定</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>this</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写bind</title>
    <link href="/2021/08/04/%E6%89%8B%E5%86%99bind/"/>
    <url>/2021/08/04/%E6%89%8B%E5%86%99bind/</url>
    
    <content type="html"><![CDATA[<p>你应该知道 bind/apply/call 的区别哈，那你能手写一个 bind 么？ 我：wtf。。。。</p><span id="more"></span><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><ul><li>bind 方法会创建一个新的函数，在 bind() 被调用时，这个新函数的 <strong>this</strong> 被指定为 bind() 的第一个参数，而<strong>其余参数</strong>（是的， bind 是有多个参数，只是我们平时只用一个）将作为新函数的<strong>预置</strong>参数，供调用时使用。</li></ul><h3 id="原版使用"><a href="#原版使用" class="headerlink" title="原版使用"></a>原版使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 浏览器环境</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> _fn = fn.bind(obj, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>_fn(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>); <span class="hljs-comment">//  3   [[4,5],6,7]</span><br>fn(); <span class="hljs-comment">// 2  undefined</span><br></code></pre></td></tr></table></figure><h3 id="手写一个-bind"><a href="#手写一个-bind" class="headerlink" title="手写一个 bind"></a>手写一个 bind</h3><figure class="highlight javascript"><figcaption><span>index.js</span><a href="/code/bind/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Function</span>.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>{<br>  <span class="hljs-keyword">let</span> fn = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 保存 this 即当前调用的 fn</span><br><br>  <span class="hljs-comment">// arguments 是一个独立的对象， 虽然长得像数组但他不是数组。 这里提供2种方式</span><br>  <span class="hljs-comment">// 1.通过 call 取值</span><br>  <span class="hljs-comment">// let args = Array.prototype.slice.call(arguments, 1); // 提取参数</span><br>  <span class="hljs-comment">// 2.转为数组</span><br>  <span class="hljs-keyword">let</span> params = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>).slice(<span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 当然也可以在定义函数时 使用  function (context,...args) {}</span><br>  <span class="hljs-comment">// args = args ?? [];</span><br><br>  <span class="hljs-comment">// 这里建议不写死参数 。因为无法判断 目标函数到底有多少参数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">// if (this instanceof newFn) {</span><br>    <span class="hljs-comment">//   return new fn(...arguments, ...params);</span><br>    <span class="hljs-comment">// }</span><br>    <span class="hljs-keyword">return</span> fn.apply(context, [...params, ...arguments]);<br>  };<br>};<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  <span class="hljs-built_in">console</span>.log(...arguments);<br>}<br><br><span class="hljs-keyword">let</span> obj = {<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>};<br><br><span class="hljs-keyword">const</span> _fn = fn.myBind(obj, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>_fn(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>); <span class="hljs-comment">//  3   [ 4, 5 ] 6 7 8 9</span><br><br><span class="hljs-keyword">let</span> fn2 = {<br>  <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>    <span class="hljs-built_in">console</span>.log(...arguments);<br>  },<br>};<br><br><span class="hljs-keyword">const</span> _fn2 = fn2.fn.bind(obj, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>_fn2(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>); <span class="hljs-comment">//  //  3   [ 4, 5 ] 6 7 8 9</span><br></code></pre></td></tr></table></figure><h3 id="那-call-apply-呢？"><a href="#那-call-apply-呢？" class="headerlink" title="那 call / apply 呢？"></a>那 call / apply 呢？</h3><figure class="highlight javascript"><figcaption><span>call_apply.js</span><a href="/code/bind/call_apply.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注意是2个参数。 不能用  ...args</span><br><span class="hljs-built_in">Function</span>.prototype.myApply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context, args</span>) </span>{<br>  <span class="hljs-keyword">let</span> fn = <span class="hljs-built_in">this</span>;<br>  context[<span class="hljs-string">&#x27;fn&#x27;</span>] = fn;<br>  args = args ?? [];<br>  <span class="hljs-keyword">const</span> res = context.fn(...args);<br>  <span class="hljs-keyword">return</span> res;<br>};<br><br><span class="hljs-comment">// 一摸一样 就改了下参数</span><br><span class="hljs-built_in">Function</span>.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) </span>{<br>  <span class="hljs-keyword">let</span> fn = <span class="hljs-built_in">this</span>;<br>  context[<span class="hljs-string">&#x27;fn&#x27;</span>] = fn;<br>  args = args ?? [];<br>  <span class="hljs-keyword">const</span> res = context.fn(...args);<br>  <span class="hljs-keyword">return</span> res;<br>};<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> { <span class="hljs-attr">a</span>: <span class="hljs-built_in">this</span>.a, <span class="hljs-attr">args</span>: <span class="hljs-built_in">arguments</span> };<br>}<br><br><span class="hljs-keyword">let</span> obj = {<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>};<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;my apply:&#x27;</span>, fn.myApply(obj, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;origin apply:&#x27;</span>, fn.apply(obj, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]));<br><br><span class="hljs-comment">// ---</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;my call:&#x27;</span>, fn.myCall(obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;origin call:&#x27;</span>, fn.call(obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入promise</title>
    <link href="/2021/08/02/%E6%B7%B1%E5%85%A5promise/"/>
    <url>/2021/08/02/%E6%B7%B1%E5%85%A5promise/</url>
    
    <content type="html"><![CDATA[<p>面试官：你如何理解 promise，能手写一个么？ 答：。。。。</p><span id="more"></span><p>要了解 promise 的细节需要看 promise A+ 规范。<a href="https://promisesaplus.com/">链接名称</a> 英文太多了，不看了直接上手写源码</p><h2 id="原生-Promise-的使用"><a href="#原生-Promise-的使用" class="headerlink" title="原生 Promise 的使用"></a>原生 Promise 的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&#x27;resolve&#x27;</span>);<br>  reject(<span class="hljs-string">&#x27;reject&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// then 是有2个参数的。 但平时我们一般只用1个 这里需要注意下</span><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;,<br>);<br><br>p.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="开始尝试手写-Promise"><a href="#开始尝试手写-Promise" class="headerlink" title="开始尝试手写 Promise"></a>开始尝试手写 Promise</h2><h3 id="1-搭建代码框架"><a href="#1-搭建代码框架" class="headerlink" title="1.搭建代码框架"></a>1.搭建代码框架</h3><p>第一步创建搭建代码框架</p><ul><li>这里需要在构造函数传入一个执行器 ，并立即执行</li><li>then 方法需要传入 2 个参数,用于执行返回结果 onFulfilled, onRejected</li><li>创建 resolve, reject 方法用于触发状态扭转</li></ul><figure class="highlight javascript"><figcaption><span>promise1.js</span><a href="/code/promise/promise1.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>      onFulfilled(<span class="hljs-built_in">this</span>.value);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>      onRejected(<span class="hljs-built_in">this</span>.reason);<br>    }<br>  };<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test1.js</span><a href="/code/promise/test1.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise1&#x27;</span>);<br><br><span class="hljs-comment">// 测试1</span><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-string">&#x27;do resolve&#x27;</span>);<br>  reject(<span class="hljs-string">&#x27;do reject&#x27;</span>);<br>});<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(res);<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-comment">// 结果 do resolve</span><br></code></pre></td></tr></table></figure><h3 id="2-加入异步"><a href="#2-加入异步" class="headerlink" title="2.加入异步"></a>2.加入异步</h3><p>第一步处理同步任务没问题但是处理异步任务就 gg</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 测试异步</span><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise1(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;do resolve&#x27;</span>);<br>  &#125;, <span class="hljs-number">10</span>);<br>&#125;);<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;,<br>);<br><span class="hljs-comment">//  结果 ： 空</span><br></code></pre></td></tr></table></figure><ul><li>因为状态扭转在异步中执行的,then 无法探查到, 我们加入一个回调队列,用于将回调方法存起来, 等状态扭转后再执行</li></ul><figure class="highlight javascript"><figcaption><span>promise2.js</span><a href="/code/promise/promise2.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>当状态改变后,执行回调队列的方法</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>当状态改变后,执行回调队列的方法</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>      onFulfilled(<span class="hljs-built_in">this</span>.value);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>      onRejected(<span class="hljs-built_in">this</span>.reason);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来 等到执行成功失败函数的时候再传递</span><br>      <span class="hljs-built_in">this</span>.onFulfilledCallback.push(onFulfilled);<br>      <span class="hljs-built_in">this</span>.onRejectedCallback.push(onRejected);<br>    }<br>    <span class="hljs-comment">// 加入异步</span><br>  };<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test2.js</span><a href="/code/promise/test2.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 主线程代码立即执行，setTimeout 是异步代码，then 会马上执行，这个时候判断</span><br><span class="hljs-comment">// Promise 状态，状态是 Pending，然而之前并没有判断等待这个状态</span><br><br><span class="hljs-keyword">const</span> MyPromise2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise2&#x27;</span>);<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise2(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">&#x27;do resolve&#x27;</span>);<br>  }, <span class="hljs-number">10</span>);<br>});<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(res);<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-comment">// 结果 do resolve</span><br><br><span class="hljs-comment">// 测试多次调用</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise2(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">&#x27;success&#x27;</span>);<br>  }, <span class="hljs-number">2000</span>);<br>});<br><br>promise.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>});<br><br>promise.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>});<br><br>promise.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>});<br><br><span class="hljs-comment">// 结果</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// resolve success</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// resolve success</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// resolve success</span><br></code></pre></td></tr></table></figure><h3 id="3-实现链式调用"><a href="#3-实现链式调用" class="headerlink" title="3.实现链式调用"></a>3.实现链式调用</h3><ul><li>then 需要支持链式调用, 那么他就需要返回一个 <strong>新的 promise</strong> 对象, 而不能是 this<ul><li>因为如果返回了 this 那么两个 promise 的状态相同, 内部状态是不能改变的,</li><li>而且每次使用 promise 的参数值是取决于上一次 then 的返回值,所以不能使用 this</li></ul></li><li>新返回的 promise 由于需要在 init 之后使用 , 否则语法报错 , 所以需要加入一个微任务 queueMicrotask(()=&gt;{ //处理新创建的 promise })</li><li>由于 then 的 return 需要作为下一次 then 的参数, 所以需要进行判断<ul><li>如果 return 的是一个新的 promise 那么就需要判断他的状态</li><li>如果是普通 value 那么直接 resolve 掉</li></ul></li><li>如果 then 返回的是自己则报错</li></ul><figure class="highlight javascript"><figcaption><span>promise3.js</span><a href="/code/promise/promise3.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span><br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>创建微任务 等待 promise 初始化完成</span><br>        <span class="hljs-comment">// 否则语法报错 不能在 init 之前使用promise</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// 链式调用这里的 res 就可能是:一个新的 promise 对象 || 普通返回值</span><br>          <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>          <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>对返回值进行处理</span><br>          resolvePromise(promise, res, resolve, reject);<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>创建微任务 等待 promise 初始化完成</span><br>        <span class="hljs-comment">// 否则语法报错 不能在 init 之前使用promise</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// 链式调用这里的 res 就可能是:一个新的 promise 对象 || 普通返回值</span><br>          <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.value);<br>          <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>对返回值进行处理</span><br>          resolvePromise(promise, res, resolve, reject);<br>        });<br>        onRejected(<span class="hljs-built_in">this</span>.reason);<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.push(onFulfilled);<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.push(onRejected);<br>      }<br>    });<br><br>    <span class="hljs-keyword">return</span> promise;<br>  };<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">self, x, resolve, reject</span>) </span>{<br>  <span class="hljs-comment">// ADD：</span><br>  <span class="hljs-keyword">if</span> (x === self) {<br>    <span class="hljs-keyword">return</span> reject(<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;MyPromise Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>),<br>    );<br>  }<br><br>  <span class="hljs-comment">// 判断x是不是 MyPromise 实例对象</span><br>  <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> MyPromise) {<br>    <span class="hljs-comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span><br>    <span class="hljs-comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br>    <span class="hljs-comment">// 简化之后</span><br>    x.then(resolve, reject);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-comment">// 普通值</span><br>    resolve(x);<br>  }<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test3.js</span><a href="/code/promise/test3.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise3&#x27;</span>);<br><br><span class="hljs-comment">// 实现 链式调用</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * then 方法要链式调用那么就需要返回一个 Promise 对象</span><br><span class="hljs-comment"> * then 方法里面 return 一个返回值作为下一个 then 方法的参数，</span><br><span class="hljs-comment"> * 如果是 return 一个 Promise 对象，那么就需要判断它的状态</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 目前这里只处理同步的问题</span><br>  resolve(<span class="hljs-string">&#x27;success&#x27;</span>);<br>});<br><br>promise1<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {<br>      resolve(<span class="hljs-string">&#x27;do inner promise &#x27;</span>);<br>    });<br>  })<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>  });<br><br><span class="hljs-comment">// 结果</span><br><span class="hljs-comment">// resolve success</span><br><span class="hljs-comment">// resolve do inner promise</span><br><br><span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> 如果 then 返回自己的 promise 的话 就会发生循环调用 ,</span><br><span class="hljs-comment">// 使用原生 promise 会报 TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-number">100</span>);<br>});<br><span class="hljs-keyword">const</span> p1 = promise2.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">return</span> p1;<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 这里不会执行</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br>p1.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {},<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 这里会执行</span><br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><span class="hljs-comment">//  结果： TypeError: MyPromise Chaining cycle detected for promise #&lt;Promise&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-实现捕获异常，并变更状态"><a href="#4-实现捕获异常，并变更状态" class="headerlink" title="4.实现捕获异常，并变更状态"></a>4.实现捕获异常，并变更状态</h3><figure class="highlight javascript"><figcaption><span>promise4.js</span><a href="/code/promise/promise4.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// TODO：捕获异常</span><br>    <span class="hljs-keyword">try</span> {<br>      executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>    } <span class="hljs-keyword">catch</span> (error) {<br>      <span class="hljs-built_in">this</span>.reject(error);<br>    }<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span><br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// TODO：捕获异常</span><br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>        <span class="hljs-comment">// TODO：捕获异常</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.reason);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.push(onFulfilled);<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.push(onRejected);<br>      }<br>    });<br><br>    <span class="hljs-keyword">return</span> promise;<br>  };<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">self, x, resolve, reject</span>) </span>{<br>  <span class="hljs-keyword">if</span> (x === self) {<br>    <span class="hljs-keyword">return</span> reject(<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;MyPromise Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>),<br>    );<br>  }<br><br>  <span class="hljs-comment">// 判断x是不是 MyPromise 实例对象</span><br>  <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> MyPromise) {<br>    <span class="hljs-comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span><br>    <span class="hljs-comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br>    <span class="hljs-comment">// 简化之后</span><br>    x.then(resolve, reject);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-comment">// 普通值</span><br>    resolve(x);<br>  }<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test4.js</span><a href="/code/promise/test4.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise4&#x27;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 捕获执行器中的代码，如果执行器中有代码错误，那么 Promise 的状态要变为失败</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// resolve(100);</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;执行错误&#x27;</span>);<br>});<br><span class="hljs-keyword">const</span> p1 = promise.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">return</span> p1;<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-number">100</span>);<br>  <span class="hljs-comment">// throw new Error(&#x27;执行错误&#x27;);</span><br>});<br>promise2<br>  .then(<br>    <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;then 执行错误&#x27;</span>);<br>    },<br>    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">console</span>.log(err);<br>    },<br>  )<br>  .then(<br>    <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    },<br>    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>      <span class="hljs-built_in">console</span>.log(err);<br>    },<br>  );<br></code></pre></td></tr></table></figure><h3 id="5-then-为可选参数-修改-pending-状态代码-增加-resolve-reject-静态方法"><a href="#5-then-为可选参数-修改-pending-状态代码-增加-resolve-reject-静态方法" class="headerlink" title="5.then 为可选参数 修改 pending 状态代码 增加 resolve/reject 静态方法"></a>5.then 为可选参数 修改 pending 状态代码 增加 resolve/reject 静态方法</h3><ul><li>静态的 resolve/reject 需要返回 promise</li></ul><figure class="highlight javascript"><figcaption><span>promise5.js</span><a href="/code/promise/promise5.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span></span><br><span class="hljs-comment">// 增加异步状态下的链式调用</span><br><span class="hljs-comment">// 增加回调函数执行结果的判断</span><br><span class="hljs-comment">// 增加识别 Promise 是否返回自己</span><br><span class="hljs-comment">// 增加错误捕获</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 增加静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">resolve</span>(<span class="hljs-params">param</span>)</span> {<br>    <span class="hljs-keyword">if</span> (param <span class="hljs-keyword">instanceof</span> MyPromise) {<br>      <span class="hljs-keyword">return</span> param;<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {<br>      resolve(param);<br>    });<br>  }<br><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 增加静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">reject</span>(<span class="hljs-params">reason</span>)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      reject(reason);<br>    });<br>  }<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    <span class="hljs-keyword">try</span> {<br>      executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>    } <span class="hljs-keyword">catch</span> (error) {<br>      <span class="hljs-built_in">this</span>.reject(error);<br>    }<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上面我们处理 then 方法的时候都是默认传入 onFulfilled、onRejected 两个回调函数，</span><br><span class="hljs-comment">     * 但是实际上原生 Promise 是可以选择参数的单传或者不传，都不会影响执行。</span><br><span class="hljs-comment">     */</span><br>    onFulfilled =<br>      <span class="hljs-keyword">typeof</span> onFulfilled === <span class="hljs-string">&#x27;function&#x27;</span> ? onFulfilled : <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br>    onRejected =<br>      <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span> ? onRejected : <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br><br>    <span class="hljs-comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span><br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>        <span class="hljs-comment">// 如果是链式调用这里的 res 就是一个新的 promise 对象</span><br><br>        <span class="hljs-comment">// const res = onFulfilled(this.value);</span><br>        <span class="hljs-comment">// ADD:创建微任务 等待 promise 初始化完成</span><br>        <span class="hljs-comment">// 否则语法报错 不能在 init 之前使用promise</span><br><br>        <span class="hljs-comment">// resolvePromise(promise, res, resolve, reject);</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// ADD:</span><br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.reason);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.push(<span class="hljs-function">() =&gt;</span> {<br>          queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>            <span class="hljs-keyword">try</span> {<br>              <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>              resolvePromise(promise, res, resolve, reject);<br>            } <span class="hljs-keyword">catch</span> (error) {<br>              reject(error);<br>            }<br>          });<br>        });<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.push(<span class="hljs-function">() =&gt;</span> {<br>          queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>            <span class="hljs-keyword">try</span> {<br>              <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.reason);<br>              resolvePromise(promise, res, resolve, reject);<br>            } <span class="hljs-keyword">catch</span> (error) {<br>              reject(error);<br>            }<br>          });<br>        });<br>      }<br>    });<br><br>    <span class="hljs-keyword">return</span> promise;<br>  };<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">self, x, resolve, reject</span>) </span>{<br>  <span class="hljs-keyword">if</span> (x === self) {<br>    <span class="hljs-keyword">return</span> reject(<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;MyPromise Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>),<br>    );<br>  }<br><br>  <span class="hljs-comment">// 判断x是不是 MyPromise 实例对象</span><br>  <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> MyPromise) {<br>    <span class="hljs-comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span><br>    <span class="hljs-comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br>    <span class="hljs-comment">// 简化之后</span><br>    x.then(resolve, reject);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-comment">// 普通值</span><br>    resolve(x);<br>  }<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test5.js</span><a href="/code/promise/test5.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise5&#x27;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 捕获执行器中的代码，如果执行器中有代码错误，那么 Promise 的状态要变为失败</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// resolve(100);</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;执行错误&#x27;</span>);<br>});<br><span class="hljs-keyword">const</span> p1 = promise.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">return</span> p1;<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-number">100</span>);<br>  <span class="hljs-comment">// throw new Error(&#x27;执行错误&#x27;);</span><br>});<br><br>promise1<br>  .then()<br>  .then()<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(value));<br><br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  reject(<span class="hljs-string">&#x27;err&#x27;</span>);<br>});<br><br>promise2<br>  .then()<br>  .then()<br>  .then(<br>    <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(value),<br>    <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(reason),<br>  );<br><br><span class="hljs-comment">// 实现 resolve 与 reject 的静态调用</span><br>MyPromise.resolve()<br>  .then(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> MyPromise.resolve(<span class="hljs-number">4</span>);<br>  })<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(res);<br>  });<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js的new到底干了什么，如何手写一个new</title>
    <link href="/2021/07/29/js%E7%9A%84new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88,%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2021/07/29/js%E7%9A%84new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88,%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>let arr = new Array() 到底内部发生了什么? js 中的实例是如何创建出来的？它和 Object.create() 区别是什么？</p><span id="more"></span><h3 id="原型链说起"><a href="#原型链说起" class="headerlink" title="原型链说起"></a>原型链说起</h3><blockquote><p>每个实例对象（object）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的<strong>构造函数的原型对象</strong>（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.b = <span class="hljs-number">2</span>;<br>&#125;;<br>f.prototype.b = <span class="hljs-number">3</span>;<br>f.prototype.c = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> f();<br><br><span class="hljs-built_in">console</span>.log(o.__proto__ === f.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 私有属性 __proto__ 指向了构造函数的原型对象</span><br><br><span class="hljs-built_in">console</span>.log(o.a); <span class="hljs-comment">//  1</span><br><span class="hljs-comment">// a是o的自身属性吗？是的，该属性的值为 1</span><br><br><span class="hljs-built_in">console</span>.log(o.b);<br><span class="hljs-comment">// b是o的自身属性吗？是的，该属性的值为 2</span><br><span class="hljs-comment">// 原型上也有一个&#x27;b&#x27;属性，但是它不会被访问到。</span><br><span class="hljs-comment">// 这种情况被称为&quot;属性遮蔽 (property shadowing)&quot;</span><br><br><span class="hljs-built_in">console</span>.log(o.c); <span class="hljs-comment">// 4</span><br><span class="hljs-comment">// c是o的自身属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4</span><br><br><span class="hljs-built_in">console</span>.log(o.d); <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// d 是 o 的自身属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// o.[[Prototype]].[[Prototype]] 为 null，停止搜索</span><br><span class="hljs-comment">// 找不到 d 属性，返回 undefined</span><br></code></pre></td></tr></table></figure><h3 id="new-内部发生了什么？原型链如何指向？"><a href="#new-内部发生了什么？原型链如何指向？" class="headerlink" title="new 内部发生了什么？原型链如何指向？"></a>new 内部发生了什么？原型链如何指向？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.b = <span class="hljs-number">2</span>;<br>&#125;;<br>f.prototype.b = <span class="hljs-number">3</span>;<br>f.prototype.c = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> f();<br><span class="hljs-built_in">console</span>.log(o);<br><span class="hljs-comment">// o 为新创建的空对象，它的 __proto__ 指向 f.prototype</span><br><span class="hljs-comment">// o.__proto__  === f.prototype   // true</span><br></code></pre></td></tr></table></figure><h4 id="new-和-Object-create-有什么区别？"><a href="#new-和-Object-create-有什么区别？" class="headerlink" title="new 和 Object.create() 有什么区别？"></a>new 和 Object.create() 有什么区别？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(f);<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">let</span> createFn = <span class="hljs-built_in">Object</span>.create(fn);<br><span class="hljs-comment">// createFn 的原型 指向 传入的 fn 的地址</span><br><span class="hljs-built_in">console</span>.log(createFn.__proto__);<br><span class="hljs-comment">// VM513:1 ƒ () &#123;</span><br><span class="hljs-comment">//     this.a = 1;</span><br><span class="hljs-comment">//     this.f = function () &#123;</span><br><span class="hljs-comment">//         console.log(f);</span><br><span class="hljs-comment">//     &#125;;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-built_in">console</span>.log(createFn.__proto__ === fn); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(createFn.constructor === fn.constructor); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(createFn.constructor === fn.prototype.constructor); <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> newFn = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(newFn.__proto__ === fn.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(newFn.constructor === fn.constructor); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(newFn.constructor === fn.prototype.constructor); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="对比-create-和-new-得知"><a href="#对比-create-和-new-得知" class="headerlink" title="对比 create 和 new 得知"></a>对比 create 和 new 得知</h5><ul><li>create</li><li><ul><li><code>createFn.__proto__</code> === fn</li></ul></li><li><ul><li><code>createFn.constructor</code> === fn.constructor</li></ul></li><li>new</li><li><ul><li><code>newFn.__proto__</code> === fn.prototype</li></ul></li><li><ul><li><code>newFn.constructor</code> === fn.prototype.constructor</li></ul></li></ul><p>也就是 create 的对象他的原型链都是指向 fn 本体的。而 new 的对象 都是指向 fn.prototype</p><h3 id="fn-constructor-和-fn-prototype-constructor-有什么关系"><a href="#fn-constructor-和-fn-prototype-constructor-有什么关系" class="headerlink" title="fn.constructor 和 fn.prototype.constructor 有什么关系"></a>fn.constructor 和 fn.prototype.constructor 有什么关系</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 还是这个栗子</span><br><span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(f);<br>  &#125;;<br>&#125;;<br><span class="hljs-built_in">console</span>.log(fn.prototype.constructor === fn); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(fn.constructor === <span class="hljs-built_in">Function</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>由上可知</p><ul><li>一个对象的 fn.constructor 是指向其父类本体的</li><li>一个对象的 fn.prototype.constructor 是指向本体的</li></ul><p>一张图就能明白：<br><img src="/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png"></p><h3 id="手写一个-new-吧"><a href="#手写一个-new-吧" class="headerlink" title="手写一个 new 吧"></a>手写一个 new 吧</h3><ul><li>new 返回一个新对象</li><li>该对象是执行了 目标类 constructor 之后的结果</li><li>该对象的 <code>__propto__</code> 指向 <strong>目标类的 prototype</strong></li></ul><figure class="highlight javascript"><figcaption><span>index.js</span><a href="/code/new/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myNew = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) </span>{<br>  <span class="hljs-keyword">let</span> obj = {};<br>  obj.__proto__ = context.prototype;<br>  context.apply(obj, args);<br>  <span class="hljs-keyword">return</span> obj;<br>};<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">person</span>(<span class="hljs-params">name, age</span>) </span>{<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>}<br><br><span class="hljs-keyword">let</span> p = myNew(person, <span class="hljs-string">&#x27;布兰&#x27;</span>, <span class="hljs-number">12</span>);<br><span class="hljs-built_in">console</span>.log(p); <span class="hljs-comment">// { name: &#x27;布兰&#x27;, age: 12 }</span><br></code></pre></td></tr></table></figure><h3 id="再手写一个-Object-create-吧"><a href="#再手写一个-Object-create-吧" class="headerlink" title="再手写一个 Object.create 吧"></a>再手写一个 Object.create 吧</h3><ul><li><code>__proto__</code> 指向目标对象即可</li></ul><figure class="highlight javascript"><figcaption><span>create.js</span><a href="/code/new/create.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = {<br>  <span class="hljs-attr">isHuman</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">printIntroduction</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`My name is <span class="hljs-subst">${<span class="hljs-built_in">this</span>.name}</span>. Am I human? <span class="hljs-subst">${<span class="hljs-built_in">this</span>.isHuman}</span>`</span>);<br>  },<br>};<br><br><span class="hljs-built_in">Object</span>.prototype.MyCreate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>{<br>  <span class="hljs-keyword">let</span> obj = {};<br><br>  obj.__proto__ = context;<br>  <span class="hljs-keyword">return</span> obj;<br>};<br><br><span class="hljs-keyword">const</span> me = <span class="hljs-built_in">Object</span>.create(person);<br>me.name = <span class="hljs-string">&#x27;Matthew&#x27;</span>; <span class="hljs-comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br>me.isHuman = <span class="hljs-literal">true</span>; <span class="hljs-comment">// inherited properties can be overwritten</span><br><span class="hljs-built_in">console</span>.log(me);<br>me.printIntroduction();<br><span class="hljs-comment">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span><br><br><span class="hljs-keyword">const</span> me2 = <span class="hljs-built_in">Object</span>.MyCreate(person);<br><br>me2.name = <span class="hljs-string">&#x27;Matthew&#x27;</span>; <span class="hljs-comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br>me2.isHuman = <span class="hljs-literal">true</span>; <span class="hljs-comment">// inherited properties can be overwritten</span><br><span class="hljs-built_in">console</span>.log(me);<br>me2.printIntroduction();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js中的栈都能干什么</title>
    <link href="/2020/03/29/js%E4%B8%AD%E7%9A%84%E6%A0%88%E9%83%BD%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88/"/>
    <url>/2020/03/29/js%E4%B8%AD%E7%9A%84%E6%A0%88%E9%83%BD%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>阅读《数据结构与算法.javascript 描述》做的一点笔记</p><span id="more"></span><h3 id="js-栈的实现"><a href="#js-栈的实现" class="headerlink" title="js 栈的实现"></a>js 栈的实现</h3><figure class="highlight javascript"><figcaption><span>index.js</span><a href="/code/stack/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Stack</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">this</span>.dataSource = [];<br>    <span class="hljs-built_in">this</span>.top = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.push = push;<br>    <span class="hljs-built_in">this</span>.pop = pop;<br>    <span class="hljs-built_in">this</span>.len = len;<br>    <span class="hljs-built_in">this</span>.peek = peek;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">push</span>(<span class="hljs-params">element</span>) </span>{<br>    <span class="hljs-built_in">this</span>.dataSource[<span class="hljs-built_in">this</span>.top++] = element;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pop</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dataSource[--<span class="hljs-built_in">this</span>.top];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">peek</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dataSource[<span class="hljs-built_in">this</span>.top - <span class="hljs-number">1</span>];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clear</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">this</span>.top = <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">len</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.top;<br>}<br><br><span class="hljs-comment">// 进制转换</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params">num, base</span>) </span>{<br>    <span class="hljs-keyword">var</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">var</span> res = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">do</span> {<br>        stack.push(num % base);<br>        num = <span class="hljs-built_in">Math</span>.floor(num / base);<br>    } <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (stack.len() &gt; <span class="hljs-number">0</span>) {<br>        res += stack.pop();<br>    }<br>    <span class="hljs-keyword">return</span> res;<br>}<br><span class="hljs-comment">// console.log(convert(10, 2)) // 1010</span><br><br><span class="hljs-comment">// 表达式匹配  如：2+500-(451-100  匹配缺失的括号位置</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params">reg</span>) </span>{<br>    <span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> _reg = reg.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; _reg.length; index++) {<br>        <span class="hljs-keyword">const</span> element = _reg[index];<br>        <span class="hljs-keyword">switch</span> (element) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;{&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;}&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;{&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;[&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;(&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;无错误&#x27;</span>);<br>}<br><span class="hljs-comment">// let reg = &quot;1+2*[(5-1+]5)&quot;</span><br><span class="hljs-comment">// format(reg)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  一个算数表达式的后缀如下：</span><br><span class="hljs-comment"> *  op1 op2 operator</span><br><span class="hljs-comment"> *  设计一个函数将中缀表达式转换为后缀表达式，然后利用栈对该表达式求值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOpPriority</span>(<span class="hljs-params">op</span>) </span>{<br>    <span class="hljs-keyword">switch</span> (op) {<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params">reg</span>) </span>{<br>    <span class="hljs-keyword">let</span> numStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> opStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> _reg = reg.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">let</span> regChange = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; _reg.length; index++) {<br>        <span class="hljs-keyword">let</span> element = _reg[index].trim();<br>        <span class="hljs-keyword">if</span> (element &amp;&amp; !<span class="hljs-built_in">isNaN</span>(element)) {<br>            <span class="hljs-comment">// 如果是数字 进入数字栈</span><br>            numStack.push(element);<br>            regChange += element;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">// 如果是符号 则进入符号栈</span><br>            regChange += element;<br>            <span class="hljs-keyword">if</span> (getOpPriority(element)) {<br>            }<br>            opStack.push(element);<br>        }<br>    }<br>    <span class="hljs-built_in">console</span>.log(regChange);<br>}<br><span class="hljs-keyword">let</span> reg = <span class="hljs-string">&#x27;1+(2-3)+5*7&#x27;</span>;<br><span class="hljs-comment">/**  57*123-++</span><br><span class="hljs-comment"> * 5    /</span><br><span class="hljs-comment"> * 4    *</span><br><span class="hljs-comment"> * 3    )</span><br><span class="hljs-comment"> * 2    -</span><br><span class="hljs-comment"> * 1    )</span><br><span class="hljs-comment"> *      +</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// change(reg);</span><br><br><span class="hljs-comment">// 一盒糖果，里面有红(1)黄(2)白(3)三种糖果， 在不改变其他糖果叠放顺序的情况下，将黄色糖果移除</span><br><span class="hljs-keyword">let</span> suger = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeSuger</span>(<span class="hljs-params">list</span>) </span>{<br>    <span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = list.length - <span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--) {<br>        <span class="hljs-keyword">const</span> element = list[index];<br>        <span class="hljs-keyword">if</span> (element !== <span class="hljs-number">2</span>) {<br>            stack.push(element);<br>        }<br>    }<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">do</span> {<br>        arr.push(stack.pop());<br>    } <span class="hljs-keyword">while</span> (stack.len() &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> arr;<br>}<br><span class="hljs-keyword">let</span> res = removeSuger(suger);<br><span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>babel入门</title>
    <link href="/2020/01/03/babel%E5%85%A5%E9%97%A8/"/>
    <url>/2020/01/03/babel%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的 <a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">《Babel 入门教程》</a>的教程所做的一些个人总结和思考</p><span id="more"></span><p>babel已经成为前端开发的基础依赖。so 借助阮大神的教程学习一下。目前babel已经更新到7.0并改包名为@babel。</p><h4 id="babel功能"><a href="#babel功能" class="headerlink" title="babel功能"></a>babel功能</h4><p>平时我们用ES5+编写代码，但是浏览器和node环境还不完全支持最新的语法（如最常见的箭头函数）。那么babel作为一个编译器的角色将我们的代码再次转换为环境所能识别的代码。</p><h4 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h4><p>babelrc 是babel的配置文件，babel如何转换代码，包括支持哪些语法全由这个配置文件决定！</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [],  &lt;===== 配置你的转码规则集合<br>  <span class="hljs-string">&quot;plugins&quot;</span>: []   &lt;===== 根据插件配置你的转码规则<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="babel-config-js和-babelrc的区别"><a href="#babel-config-js和-babelrc的区别" class="headerlink" title="babel.config.js和.babelrc的区别"></a>babel.config.js和.babelrc的区别</h5><p>babel.config.js 以编程的方式进行配置且会将node_modules的包也一同转换；<br>.babelrc 仅转换你的工程文件</p><p> 官方解释：</p><ul><li>You want to programmatically create the configuration?</li><li>You want to compile node_modules?</li></ul><blockquote><p>babel.config.js is for you! </p></blockquote><ul><li>You have a static configuration that only applies to your simple single package?</li></ul><blockquote><p>.babelrc is for you!</p></blockquote><h5 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h5><blockquote><p>官方解释：Babel is a compiler (source code =&gt; output code). Like many other compilers it runs in 3 stages: parsing, transforming, and printing.</p></blockquote><p>babel的插件一般会拆分成很小的粒度，可以按需引入</p><p>pulugins 是一个插件数组，你只需要按需配置你的插件用来制定你的代码该 如何解析，如何转换，如何输出你的代码。（当然大部分时候只需要无脑使用就行了，不需要太多配置）<br>如果有多个配置项，<strong>按顺序解析！！</strong></p><h5 id="preset"><a href="#preset" class="headerlink" title="preset"></a>preset</h5><p>由于 plugin 可以按需配置，但是过多的配置又让人心力憔悴，所以就有了preset<br>这个可以看作是一堆插件的集合。<br>如果有多个preset 为了向后兼容采用的 <strong>倒叙解析</strong></p><h5 id="presets与plugins-的顺序问题"><a href="#presets与plugins-的顺序问题" class="headerlink" title="presets与plugins 的顺序问题"></a>presets与plugins 的顺序问题</h5><p>再配置文件中的presets和plugins 会先执行 plugins的配置，再执行presets </p><pre><code>&#123;  &quot;plugins&quot;: [                    //按顺序先执行 plugins    &quot;transform-react-jsx&quot;,    &quot;transform-async-to-generator&quot;  ],  &quot;presets&quot;: [                    // 按倒叙再plugins执行完后执行    &quot;es2015&quot;,    &quot;es2016&quot;      ]&#125;</code></pre><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>babel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>babel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组解构赋值</title>
    <link href="/2019/12/31/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <url>/2019/12/31/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的《ECMAScript 6 入门》的教程所做的一些个人总结和思考</p><span id="more"></span><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p><h4 id="示例摘要"><a href="#示例摘要" class="headerlink" title="示例摘要"></a>示例摘要</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">let [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <br><br>let [head, ...tail] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>head <span class="hljs-regexp">//</span> <span class="hljs-number">1</span><br>tail <span class="hljs-regexp">//</span> [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>let [x, y, ...z] = [<span class="hljs-string">&#x27;a&#x27;</span>];<br>x <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;a&quot;</span><br>y <span class="hljs-regexp">//</span> undefined<br>z <span class="hljs-regexp">//</span> []   <span class="hljs-regexp">//</span>空数组<br></code></pre></td></tr></table></figure><p> set解构也可以用数组遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [a,b,c] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><blockquote><p>只要数据具有Iterator接口，均可以被解构</p></blockquote><h5 id="可使用默认值"><a href="#可使用默认值" class="headerlink" title="可使用默认值"></a>可使用默认值</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-keyword">let</span> [<span class="hljs-attr">a=123]=[undefined]</span><br>/// <span class="hljs-attr">a</span> = <span class="hljs-number">123</span><br><br><span class="hljs-keyword">let</span> [<span class="hljs-attr">x</span> =<span class="hljs-number">1</span> ]= [ undefined ]<br>// <span class="hljs-attr">x</span> = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> [ <span class="hljs-attr">x</span> = <span class="hljs-number">2</span>] = [<span class="hljs-literal">null</span>]<br>//<span class="hljs-attr">x</span> = <span class="hljs-literal">null</span> <br></code></pre></td></tr></table></figure><p>由于ES6中使用严格相等运算符(====)，所以只有元素严格等于undefined时才生效</p><ul><li> 惰性求值</li></ul><p>解构中如果默认的值是一个表达式，则在使用时才会执行。</p><ul><li> 对象解构</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">let &#123; foo: baz &#125; = &#123; foo: <span class="hljs-string">&#x27;aaa&#x27;</span>, bar: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br>baz <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;aaa&quot;</span><br><br>let obj = &#123; first: <span class="hljs-string">&#x27;hello&#x27;</span>, last: <span class="hljs-string">&#x27;world&#x27;</span> &#125;;<br>let &#123; first: f, last: l &#125; = obj;   <span class="hljs-regexp">//</span> 指定解构为新变量<br>f <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;hello&#x27;</span><br>l <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;world&#x27;</span><br></code></pre></td></tr></table></figure><p>上例对象解构中 foo为解构模式，baz为被赋值变量，即key为解构模式，value为目标变量。</p><p>这里可以使用ES6的新特性，简写为下面的情况，</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> &#123; <span class="hljs-built_in">log</span> &#125; = console<span class="hljs-comment">;     </span><br>// 完整写法 <span class="hljs-keyword">const</span> &#123; <span class="hljs-built_in">log</span>:<span class="hljs-built_in">log</span>&#125;=console<br><span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) // hello<br></code></pre></td></tr></table></figure><ul><li>注意：解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">prop</span>: x &#125; = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// TypeError</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">prop</span>: y &#125; = <span class="hljs-literal">null</span>; <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>解构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>let/const命令</title>
    <link href="/2019/12/30/let-const%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/12/30/let-const%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的《ECMAScript 6 入门》的教程所做的一些个人总结和思考</p><span id="more"></span><h3 id="let-const"><a href="#let-const" class="headerlink" title="let/const"></a>let/const</h3><h4 id="死区"><a href="#死区" class="headerlink" title="死区"></a>死区</h4><p>采用块级作用域，不存在<strong>变量提升</strong>，会产生暂时性<strong>死区</strong>。 ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  tmp = <span class="hljs-string">&#x27;abc&#x27;</span>; <span class="hljs-comment">// ReferenceError</span><br>  <span class="hljs-keyword">let</span> tmp; <span class="hljs-comment">// 在当前块作用域 tmp属于声明之前就使用 so 报错</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数声明不会提升"><a href="#函数声明不会提升" class="headerlink" title="函数声明不会提升"></a>函数声明不会提升</h4><p>由于为了兼容老代码，在支持 ES6 的浏览器中会有所修改</p><ul><li>  允许在块级作用域内声明函数。</li><li>  函数声明类似于 var，即会提升到全局作用域或函数作用域的头部。</li><li>  同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><h4 id="const-本质"><a href="#const-本质" class="headerlink" title="const 本质"></a>const 本质</h4><blockquote><p>const 实际上保证的，并不是变量的值不得改动，而是变量<strong>指向的内存地址</strong>所保存的数据不得改动。</p></blockquote><ul><li>  对于简单类型的数据（数值、字符串、布尔值）: 值就保存在变量指向的那个内存地址，因此等同于常量。</li><li>  但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>let</tag>
      
      <tag>const</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于webpack抽离配置文件的思考</title>
    <link href="/2019/12/23/%E5%85%B3%E4%BA%8Ewebpack%E6%8A%BD%E7%A6%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2019/12/23/%E5%85%B3%E4%BA%8Ewebpack%E6%8A%BD%E7%A6%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>大部分项目开发使用的环境和生产环境有较大差异，且前后端通过 API 进行通信，部署生产项目时必须大量修改配置重新打包。有时候可能仅仅是配置文件的微小改变却需要重新打包部署发布，对于我们本就心力憔悴的程序员来说又是一种折磨。so 我们需要一种更加便利的配置加载方式！</p><h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><blockquote><p>目标：分离出 prod 配置文件，同时保留 dev 的配置。根据 webpack 得 mode 字段判断当前环境。打包后在不同的环境自动使用不同的配置文件，同时在生产环境可以根据需求动态修改，无需重新打包部署</p></blockquote><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>在大量浏览网上的解决方案后，发现大致方法分为 3 种。</p><blockquote><ol><li>建立 globalConfig.json 文件用来存放配置，打包的时候分离出这个 json。在项目初始化的时候再异步加载该文件。</li></ol></blockquote><ul><li>  思考：个人认为是一种很不错的思路，但是如果个别项目前期初始化需要做大量的逻辑判断或多个异步操作，这个时候异步就显得有些难以控制了，必须用 async/await 将异步改为同步，需要前期做好规划。</li></ul><blockquote><ol start="2"><li>网上还有一种方式是通过 webpack 的 <a href="https://www.npmjs.com/package/generate-asset-webpack-plugin">generate-asset-webpack-plugin</a> 插件，在打包的时候读取一份 json 然后再重新生成一份配置文件。</li></ol></blockquote><ul><li>  思考：这种打包方式更能把 webpack 的能力发挥到极致，本想仔细研究的，但是由于小弟实在是没有找到这个插件的详细文档，且常年没有更新，貌似已经被抛弃了，因此有太多不确定性 so 放弃了种方式</li></ul><blockquote><ol start="3"><li>利用浏览器的 window 全局对象。先项目中建立一个 globalConfig.js，在打包时在 html 里先加载这个文件，将配置文件注入到 window 全局对象中。然后执行后面的初始化逻辑。</li></ol></blockquote><ul><li>  思考：目前来讲个人认为这是一个简单且可靠的方式。虽然大家都知道占用全局变量是一个不好的习惯，但毕竟是 API 配置文件其重要性不言而喻，so 占用一个全局变量也无伤大雅吧~</li></ul><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><blockquote><p>环境：使用 vue3，webpack4 未使用 vue-cli</p></blockquote><ul><li>  手写一个最基础的 webpack 配置，这里只设置了开发 dev 和生产环境 prod 两种配置，vue 能跑通就行~~ 重点是在打包时根据 process.env. NODE_ENV 判断应该使用 dev 还是 prod 的配置文件。在 build 生产环境时利用 copy-webpack-plugin 插件将 prodGlobalConfig.js 复制到 dist 下，然后再 html(需要使用简单的 ejs 语法)中加载即可</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── build<br>│   ├── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.base</span><span class="hljs-selector-class">.js</span><br>│   ├── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.dev</span><span class="hljs-selector-class">.js</span><br>│   └── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.prod</span><span class="hljs-selector-class">.js</span><br>├── package-lock<span class="hljs-selector-class">.json</span><br>├── package<span class="hljs-selector-class">.json</span><br>├── public<br>│   ├── devGlobalConfig<span class="hljs-selector-class">.js</span>  &lt;===你的开发环境config<br>│   ├── index<span class="hljs-selector-class">.html</span><br>│   └── prodGlobalConfig<span class="hljs-selector-class">.js</span> &lt;===正式环境config<br>└── <span class="hljs-attribute">src</span><br>    ├── App<span class="hljs-selector-class">.vue</span><br>    ├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span><br>    ├── store<br>    │   ├── config<span class="hljs-selector-class">.js</span><br>    │   └── index<span class="hljs-selector-class">.js</span><br>    └── utils<br>        └── getConfig<span class="hljs-selector-class">.js</span>   &lt;===定义根据环境获取配置的工具函数<br></code></pre></td></tr></table></figure><p>webpack.config.prod.js: 使用 CopyWebpackPlugin 将配置文件复制到打包目录</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.base.js&quot;</span>);<br><span class="hljs-keyword">const</span> marge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-merge&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> CopyWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;copy-webpack-plugin&quot;</span>);<br><br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = marge(common, &#123;<br>    mode: <span class="hljs-string">&quot;production&quot;</span>,<br>    output: &#123;<br>        filename: <span class="hljs-string">&quot;[name].[chunkhash].bundle.js&quot;</span><br>    &#125;,<br>    plugins: [<br>        <span class="hljs-keyword">new</span> CleanWebpackPlugin(),<br>        <span class="hljs-keyword">new</span> CopyWebpackPlugin([     &lt;== 将生产环境配置文件拷贝到最终的打包目录下<br>            &#123;<br>                context: path.resolve(__dirname,<span class="hljs-string">&#x27;..&#x27;</span>),<br>                from: <span class="hljs-string">&quot;./public/prodGlobalConfig.js&quot;</span>,<br>                to: <span class="hljs-string">&quot;.&quot;</span><br>            &#125;<br>        ])<br>    ]<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>prodGlobalConfig.js：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// 生产环境配置项</span><br><span class="hljs-keyword">window</span>.globalConfig = &#123;<br>    <span class="hljs-keyword">text</span>: <span class="hljs-string">&quot;prod&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>devGlobalConfig.js：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"> <span class="hljs-comment">// 开发环境</span><br><span class="hljs-keyword">const</span> devConfig = &#123;<br>    text: <span class="hljs-string">&quot;dev&quot;</span><br>&#125;;<br><span class="hljs-keyword">export</span> &#123; devConfig &#125;;<br></code></pre></td></tr></table></figure><p>getConfig.js：根据 process.env. NODE_ENV 判断当前所处的环境，返回不同的配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; devConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../public/devGlobalConfig&quot;</span>;<br><br><span class="hljs-keyword">const</span> getConfig = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.globalConfig;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> devConfig;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; getConfig &#125;;<br></code></pre></td></tr></table></figure><p>main.js： 简单处理。直接将配置文件写入根对象</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/getConfig&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br>Vue.prototype.globalConfig = getConfig();<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&quot;<span class="hljs-subst">#app</span>&quot;</span>,<br>    render: h =&gt; h(App)<br>&#125;);<br></code></pre></td></tr></table></figure><p>index.html：使用 ejs 语法判断所处环境，控制是否加载文件</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;%=</span><span class="ruby"> htmlWebpackPlugin.options.title </span><span class="xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 判断当前环境 --&gt;</span></span><br><span class="xml">        &lt;%</span><span class="ruby"> <span class="hljs-keyword">if</span>(process.env.NODE_ENV===<span class="hljs-string">&#x27;production&#x27;</span>)&#123;</span><span class="xml">%&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./prodGlobalConfig.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">        &lt;%</span><span class="ruby"> &#125;</span><span class="xml">%&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
