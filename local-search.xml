<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>富文本到底在解决什么问题?</title>
    <link href="/2022/02/21/%E5%AF%8C%E6%96%87%E6%9C%AC%E5%88%B0%E5%BA%95%E5%9C%A8%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/"/>
    <url>/2022/02/21/%E5%AF%8C%E6%96%87%E6%9C%AC%E5%88%B0%E5%BA%95%E5%9C%A8%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>为什么富文本被誉为“前端天坑”？具体有哪些坑？也有人称之为”前端天花板”,又凭什么成为前端天花板？</p><span id="more"></span><h2 id="经典版富文本-代表-早期轻量级编辑器如-UEditor"><a href="#经典版富文本-代表-早期轻量级编辑器如-UEditor" class="headerlink" title="经典版富文本(代表:早期轻量级编辑器如 UEditor)"></a>经典版富文本(代表:早期轻量级编辑器如 UEditor)</h2><h3 id="1-content-editable-和-exeCommand"><a href="#1-content-editable-和-exeCommand" class="headerlink" title="1.content-editable 和 exeCommand"></a>1.content-editable 和 exeCommand</h3><p>全局属性 content-editable 是富文本实现的核心,用于创建可编辑区域.而 document.exeCommand 用于触发命令,从而操作可编辑区域.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Editable_content#%E4%BE%8B%E5%AD%90%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E4%BD%86%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8">这里有个最简单的富文本示例</a></p><p>可以 cv 下来运行一下这个示例,这个示例基本上包含了大部分常用的富文本功能.这个编辑器看似没有任何问题所有的功能都正常渲染。但真正的问题就出在这看似正常的渲染里。</p><h3 id="2-天坑的由来"><a href="#2-天坑的由来" class="headerlink" title="2.天坑的由来"></a>2.天坑的由来</h3><p>分别用 chrome 和 firefox 运行一下。 随便输入点字符，然后<strong>中间敲几个回车</strong></p><p><img src="/images/rich-text-editor/1.png" alt="对比"></p><p>可以看见虽然他们长得一样，但实际上视图层的代码语义是完全不同的</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- firefox结果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rte-editbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rte-editbox-0&quot;</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>一串<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>字符<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- chrome结果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rte-editbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rte-editbox-0&quot;</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  一串<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>字符<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>一串</code> 这个首行字符在 firefox 下被认为是一个独立的子 div，而在 chrome 下认为是一个普通的字符.</p><p>那么这里就出现了语义上的分歧.而这种分歧在持续开发中还会有更多.而这成了富文本中的天坑。 因为 <strong>exeCommand 并不属于 w3c 规范</strong>,是完全浏览器自行实现的 api 并且对用户是完全黑盒状态，那天突然不支持了或者修改了都不好说。</p><p>在富文本的环境下我们要对 dom 进行精确操作但由于同样的 view 可能会有多种 dom 情况，并且很难一一列举需要在不停的使用中慢慢发现慢慢迭代，这也成了富文本开发的主要工作量之一。</p><blockquote><p>contentEditable 生成的 DOM 不总是符合我们的预期的。视觉上等价，但是在 DOM 结构上不是等价的。在平时 web 开发中 我们只需要关心视觉上的等价,在富文本中需要<strong>双向等价</strong>。</p></blockquote><p>那么如何解决这个问题呢? 这个时候我们就需要用到类似 vue/react 的单向数据流的思维了。<strong>如果我们弃用 exeCommand 并拦截掉浏览器默认渲染行为,所有的视图层由 data 驱动渲染,那么就可以保证 data 到 view 的一致性了</strong> 而这就是如今的富文本编辑器的主流解决方案</p><h2 id="现代版富文本-代表-draft-js-slate-js"><a href="#现代版富文本-代表-draft-js-slate-js" class="headerlink" title="现代版富文本(代表:draft-js,slate-js)"></a>现代版富文本(代表:draft-js,slate-js)</h2><p>我们知道现代富文本编辑器的核心解决思路就是弃用 exeCommand 自己实现 data 到 view 的渲染。那么他们是如何实现的呢?</p><h3 id="浅析-slate-工作流程"><a href="#浅析-slate-工作流程" class="headerlink" title="浅析 slate 工作流程"></a>浅析 slate 工作流程</h3><ul><li>在富文本操作区域内 content-editable 被继续保留, 通过拦截用户事件触发自定义 command 指令。</li><li>指令的执行会生成 Operation 队列</li><li>每个 Operation 被逐个 apply 到编辑器数据模型(增删改), 根据不同的操作修改数据模型,同时将受影响的节点表示为 dirty path。</li><li>将标识出来的 dirty path 逐个 normalize (如合并相邻文本操作)</li><li>返回最新的 数据模型(data) 重新 render 正确的结果</li></ul><div id="flowchart-0" class="flow-chart"></div><blockquote><p>很明显这就是一个单向数据流模型, 这也是富文本的标准解决方案了 draft.js 也是类似的单项数据流</p></blockquote><h3 id="现代富文本框架的瓶颈"><a href="#现代富文本框架的瓶颈" class="headerlink" title="现代富文本框架的瓶颈"></a>现代富文本框架的瓶颈</h3><p>随着时代的进步现代富文本的需求场景已经逐渐从<strong>单人编辑</strong>发展到了<strong>多人协同</strong>场景了.前面聊的 slate 可以很好的实现这个功能,slate 将 command 操作拆分为了粒度更小的 operation 队列.当我们把 operation 发送到对方, 对方便能拿到和我们一样的数据了</p><blockquote><p>与其告诉对方自己生成了怎样的内容，不如再细致一点，告诉对方自己执行了怎样的操作</p></blockquote><p>但问题在于多人协同场景,已经不仅仅是 pc 浏览器的范畴了,更有可能会是: A 在 PC Chrome 上编辑文档,B 在 ipad 上编辑,C 又在安卓上查看。</p><ol><li>由于 content-editable 依赖于浏览器,就意味着在多端适配上有天然的障碍.</li><li>各浏览器对标签的渲染实现并不相同,同一个 h1 标签在 safari 和 chrome 上就有不同的 UI 呈现.</li><li>除了 UI 呈现各浏览器实现不同,操作也有些许不同.如在 chrome 里 双击文本会拖蓝<strong>一组词语</strong>,而 firefox 双击则会拖蓝<strong>一句话</strong></li></ol><p>这些差异兼容性理论上都是可以用各种方式抹平,但这就是个无底洞每一次浏览器更新都会伴随新的问题出现</p><h2 id="最终版富文本-代表-Google-Docs-Office-Word-Online-iCloud-Pages-WPS-⽂字在线版-腾讯文档"><a href="#最终版富文本-代表-Google-Docs-Office-Word-Online-iCloud-Pages-WPS-⽂字在线版-腾讯文档" class="headerlink" title="最终版富文本(代表:Google Docs/Office Word Online/iCloud Pages/ WPS ⽂字在线版/腾讯文档)"></a>最终版富文本(代表:Google Docs/Office Word Online/iCloud Pages/ WPS ⽂字在线版/腾讯文档)</h2><p>我们可以打开以上编辑器 F12 查看一下渲染元素,会发现这种大厂的编辑器都无一例外的放弃 dom 渲染,甚至只能看见整个输入页内只有一个 空的 canvas 或者 svg 或者 div.那他们如何完成页面渲染的呢? 很可惜这种终极富文本编辑器目前没有任何相关开源项目就项目解析文章都很少,只知道 google docs 是通过 canvas 重写一个渲染层。既然从写了整个渲染层那么之前提出的多端适配/UI 一致性几乎都可以解决了。</p><p><img src="/images/rich-text-editor/2.png" alt="google docs"></p><p>毕竟既然解决不了浏览器的问题，那就把浏览器解决掉. 具体如何把浏览器无从得知,只知道极其困难。</p><p>最后用语雀文档的负责人的表格做一个直观的对比吧<br><img src="/images/rich-text-editor/3.png" alt="截取自&#39;富文本编辑器的技术演进&#39;"></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">start=>start: 渲染视图event=>operation: 事件拦截触发 commandoperation=>operation: 执行 command 生成 Operation 队列apply=>operation: Operation 逐个 apply 修改数据模型生成 dirty pathdirty=>operation: normalize 构建 datae=>end: 渲染视图start->event->operation->apply->dirty->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>富文本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器中的ESModule</title>
    <link href="/2022/02/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84ESModule/"/>
    <url>/2022/02/02/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84ESModule/</url>
    
    <content type="html"><![CDATA[<p>目前浏览器开始逐步支持原生 ESModule,那么如何理解这个特性呢?对于开发而言又会产生哪些变化呢?<br>本文参考自<a href="https://www.zhangxinxu.com/wordpress/2018/08/browser-native-es6-export-import-module/">张鑫旭的博客</a></p><span id="more"></span><h2 id="兼容性-2022-2-11"><a href="#兼容性-2022-2-11" class="headerlink" title="兼容性(2022-2-11)"></a>兼容性(2022-2-11)</h2><p><img src="/images/can-i-use-modules-script.png" alt="静态import"><br><img src="/images/can-i-use-dynamic.png" alt="动态import"></p><p>目前主流浏览器版本均已支持</p><h2 id="静态-import"><a href="#静态-import" class="headerlink" title="静态 import"></a>静态 import</h2><p>当我们给 script 标签 加上 <code>type=&quot;module&quot;</code> 时,浏览器就会自动把 內联或者外链的 script 认为是 ESModule .</p><figure class="highlight html"><figcaption><span>test-static-import.html</span><a href="/code/browser-ESModule/test-static-import.html">view raw</a></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> testDefaultExport,{ testStaticImport } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span></span><br><span class="javascript">  testStaticImport()</span><br><span class="javascript">  testDefaultExport()</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>test.js</span><a href="/code/browser-ESModule/test.js">view raw</a></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testStaticImport</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;命名 export&quot;</span>)<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testDefaultExport</span>(<span class="hljs-params"></span>)</span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;默认 export&quot;</span>)<br>}<br></code></pre></div></td></tr></table></figure><p><img src="/images/browser-esmodule/1.png" alt="结果"></p><p>注意: 如果希望使用 node 命名规范的 ESModule (mjs) 需要在服务器端设置 mine type 为 <code>application/javascript</code>。</p><h3 id="注意一些细节"><a href="#注意一些细节" class="headerlink" title="注意一些细节"></a>注意一些细节</h3><ol><li><p>对于老旧浏览器不支持 ESModule 的情况，可以使用 <code>nomodule</code> 进行兼容</p></li><li><p>import 不支持裸露的说明符</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 不支持</span><br><span class="hljs-keyword">import</span> &#123; A &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;xxx.mjs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; B &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils/xx.mjs&#x27;</span><br><br><span class="hljs-comment">// 支持</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;https://unpkg.com/react@17/umd/react.development.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;/utils/bar.mjs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./bar.mjs&#x27;</span><br><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../bar.mjs&#x27;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>默认按 defer(<a href="./html%E4%B8%AD%E7%9A%84defer%E5%92%8Casync">defer 和 async 详情</a>) 行为的顺序加载</li></ol><ul><li>defer 简单说明</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 同步 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 异步但顺序保证 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;3.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>module</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- module 默认外挂defer --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.mjs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 硬加载嘛 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 比第一个要晚一点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;3.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 最终加载顺序 2,1,3 --&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>内敛的 module</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 默认 defer --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Inline module执行&#x27;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 硬加载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 内敛 script 没有defer概念，因此写了没有用等于 硬加载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Inline script执行&#x27;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 最终顺序 1.js -&gt; Inline script -&gt; Inline module -&gt;2.js --&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="4"><li>支持 <code>async</code></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- firstBlood模块一加载完就会执行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; pColor &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./firstBlood.mjs&#x27;</span></span><br><span class="javascript">  pColor(<span class="hljs-string">&#x27;red&#x27;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- doubleKill模块一加载完就会执行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./doubleKill.mjs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li><p>总是跨域<br>需要资源服务器端配置 <code>Access-Control-Allow-Origin</code> 字段</p></li><li><p>天然无凭证<br>如果请求来自同一个源（域名一样），大多数基于 CORS 的 API 将发送凭证（如 cookie 等），但 fetch()和模块脚本是例外 – 除非您要求，否则它们不会发送凭证。</p></li></ol><h2 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import"></a>动态 import</h2><figure class="highlight html"><figcaption><span>test-dynamic-import.html</span><a href="/code/browser-ESModule/test-dynamic-import.html">view raw</a></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./test.js&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">module</span></span>)=&gt;</span>{</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;动态引入&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-built_in">module</span>.default()</span><br><span class="javascript">    <span class="hljs-built_in">module</span>.testStaticImport()</span><br><span class="javascript">  })</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="/images/browser-esmodule/2.png" alt="结果"></p><h3 id="一点细节"><a href="#一点细节" class="headerlink" title="一点细节"></a>一点细节</h3><ol><li><code>import()</code> 和 <code>静态 import</code> 一样不能是裸露的地址。</li><li>不同的是 <code>import()</code> 可以直接使用在 script 标签中 因此它没有 <code>type=&quot;module&gt;&quot;</code> 的限制</li><li><code>import()</code> 总是跨域</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防抖和节流</title>
    <link href="/2021/10/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2021/10/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p>手写一个防抖/节流 函数</p><span id="more"></span><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight javascript"><figcaption><span>debounce.js</span><a href="/code/debounce和throttle/debounce.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 防抖</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, wait</span>) </span>{<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">let</span> _this = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">if</span> (timer) {<br>      <span class="hljs-built_in">clearTimeout</span>(timer);<br>    }<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>      fn.apply(_this, <span class="hljs-built_in">arguments</span>);<br>      timer = <span class="hljs-literal">null</span>;<br>    }, wait);<br>  };<br>}<br><br><br><br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  fn();<br>});<br></code></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><figure class="highlight javascript"><figcaption><span>throttle.js</span><a href="/code/debounce和throttle/throttle.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 节流</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, wait</span>) </span>{<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始值为0 则：首次立即执行   Infinity 则首次不立即执行</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">let</span> _this = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Date</span>.now() - timer &gt;= wait) {<br>      fn.apply(_this, <span class="hljs-built_in">arguments</span>);<br>    }<br>    timer = <span class="hljs-built_in">Date</span>.now();<br>  };<br>}<br><br><span class="hljs-keyword">const</span> fn = throttle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>);<br>}, <span class="hljs-number">1000</span>);<br><br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  fn();<br>});<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>html中的defer和async</title>
    <link href="/2021/10/14/html%E4%B8%AD%E7%9A%84defer%E5%92%8Casync/"/>
    <url>/2021/10/14/html%E4%B8%AD%E7%9A%84defer%E5%92%8Casync/</url>
    
    <content type="html"><![CDATA[<p>defer 和 async 的区别是什么？</p><span id="more"></span><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>defer 和 async 都是 script 标签的属性 其实 script 定义的属性除了 src 或者 type 并不只是这两个 还有 charset / crossorigin /integrity 等等。只是面试喜欢问 defer 和 async 的区别</p><ol><li><p>不使用时：<br>没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><ul><li>总结下就是 读到这里就执行这个脚本。并阻塞后续文档的加载。 (所以我们喜欢把 script 放在文档的末尾)</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>async<br>有 async 加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）</p><ul><li>总结下就是 文档 和 script 的加载同步执行</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>defer<br>有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后, DOMContentLoaded 事件触发之前完成</p><ul><li>总结下就是加载过程和 async 一样都是同步加载。 但不一样的是 script 不执行。 等 DOMContentLoaded 之后再执行</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;myscript.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一图胜千言:<br><img src="/images/defer%E5%92%8Casync.jpeg" alt="defer 和 async"></p><h3 id="总结使用"><a href="#总结使用" class="headerlink" title="总结使用:"></a>总结使用:</h3><ol><li>defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）</li><li>它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li><li>关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用</li><li>async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</li><li>仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认识@import</title>
    <link href="/2021/10/14/%E8%AE%A4%E8%AF%86css%E7%9A%84@import/"/>
    <url>/2021/10/14/%E8%AE%A4%E8%AF%86css%E7%9A%84@import/</url>
    
    <content type="html"><![CDATA[<p>了解 <code>@import</code> 么？ 和 <code>&lt;link&gt;</code> 有何不同?</p><span id="more"></span><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li>用法: <code>@import url(&#39;a.css&#39;);</code> 或者 <code>@import &#39;a.css&#39;;</code> 且必须定义在最顶部</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;a.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;a.css&#x27;</span>);</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><p>加载页面时，link 标签引入的 CSS 被同时加载；</p><p><code>@import</code> 引入的 CSS 会等到页面全部被下载完再被加载。(因为 <code>@import</code> 是有顺序的语义的)</p><ol><li><code>@import</code> &amp; <code>@import</code></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// 如果一直使用@import，那么就没有什么性能问题 两个样式文件将同时并行下载<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;a.css&#x27;</span>);</span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;b.css&#x27;</span>);</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>link &amp; <code>@import</code></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//会导致样式表文件逐个加载，并行下载资源是加速页面的一个关键,在IE中link混合@import会破坏样式并行下载<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;a.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;b.css&#x27;</span>);</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>link 嵌套 <code>@import</code></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//这种方式同样阻止并行加载代码，但是这次是对于所有的浏览器,其实这个应该不会感到奇怪吧，简单的想一下就能理解了。浏览器必须先下载a.css，并分析它，这个时候，浏览器发现了@import规则，然后才会开始加载b.css.<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;a.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br>//在a.css中: @import url(&#x27;b.css&#x27;);<br></code></pre></div></td></tr></table></figure><ol start="4"><li>link 阻断 @import</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">//在下载a.css完成之前，IE不会开始下载b.css。但是在其它所有的浏览器中，这种情况不会发生<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;a.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;proxy.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br>//proxy.css的代码: @import url(&#x27;b.css&#x27;);<br></code></pre></div></td></tr></table></figure><ol start="5"><li><p>多个 <code>@import</code></p><p>IE 中使用<code>@import</code> 会引起<strong>资源</strong>被按照一个不同于预期的顺序下载,在 IE 中，如果脚本中包含的代码，来自样式表文件中应用的样式(比如 getElementsByClassName)， 那么就将可能会发生意外的结果，因为脚本先于样式被加载，尽管开发人员将其置于代码的最后面。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// @import在IE中引发资源文件的下载顺序被打乱<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;a.css&#x27;</span>);</span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;b.css&#x27;</span>);</span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;c.css&#x27;</span>);</span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;d.css&#x27;</span>);</span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;e.css&#x27;</span>);</span><br><span class="css">  <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&#x27;f.css&#x27;</span>);</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;one.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="6"><li>link &amp; link<br>使用 LINK 来引入样式更简单和安全,使用 LINK 可确保<strong>样式</strong>在所有浏览器里面都能被并行下载,同样能保证<strong>资源</strong>按照开发人员制定的顺序下载。</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;a.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;b.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件冒泡和捕获</title>
    <link href="/2021/10/14/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E6%8D%95%E8%8E%B7/"/>
    <url>/2021/10/14/%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E6%8D%95%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<p>什么是事件冒泡？如何阻止？什么是事件捕获？如何阻止？</p><span id="more"></span><h3 id="冒泡-捕获"><a href="#冒泡-捕获" class="headerlink" title="冒泡/捕获"></a>冒泡/捕获</h3><p>在前端 dom 事件的世界中 除了 focus / onblur / scroll 几乎所有的事件默认都是冒泡的（因为 addEventListener 第三个参数默认为 false）。</p><p>在 dom 事件流里所有的事件都是经过先捕获再冒泡并在<strong>冒泡阶段执行回调</strong>。</p><ul><li><p>阻止冒泡: <code>e.stopPropagation()</code> 或者 <code>e.cancelBubble = true</code></p></li><li><p>捕获阶段执行: <code>addEventListener</code> 第三个参数为 true 即可。 (注意: 事件捕获后还是会继续向下传递的,只是在传递到 target Dom 之后不会再冒泡阶段执行)</p></li><li><p>捕获阶段执行并阻止向下传递: 将上述 2 个方法同时使用即可。 即： 在目标事件上加 <code>e.stopPropagation()</code> 并且 <code>addEventListener</code> 第三个参数为 true</p></li></ul><h3 id="stopPropagation-stopImmediatePropagation"><a href="#stopPropagation-stopImmediatePropagation" class="headerlink" title="stopPropagation() / stopImmediatePropagation()"></a>stopPropagation() / stopImmediatePropagation()</h3><p><code>e.stopPropagation</code> 和 <code>e.stopImmediatePropagation</code> 都有阻止冒泡的功能。 但是 <code>stopImmediatePropagation</code> 做得更彻底。它不光阻止事件冒泡，并将当前事件<strong>后续绑定的其他函数一并阻止</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>事件流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-命令模式</title>
    <link href="/2021/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>命令模式中的命令（command）指的是一个执行某些特定事情的指令。</p><p>命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p><h3 id="oop-思想的命令模式"><a href="#oop-思想的命令模式" class="headerlink" title="oop 思想的命令模式"></a>oop 思想的命令模式</h3><figure class="highlight javascript"><figcaption><span>command-pattern.js</span><a href="/code/design-pattern/command-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// dom 绑定 click 事件场景</span><br><span class="hljs-comment">// 绑定命令函数</span><br><span class="hljs-keyword">var</span> setCommand = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">button, command</span>) </span>{<br>  button.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    command.execute();<br>  };<br>};<br><br><span class="hljs-comment">// 封装命令方法</span><br><span class="hljs-keyword">var</span> MenuBar = {<br>  <span class="hljs-attr">refresh</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;刷新&#x27;</span>);<br>  },<br>};<br><br><span class="hljs-comment">// 封装命令类</span><br><span class="hljs-keyword">var</span> refreshCommand = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) </span>{<br>  <span class="hljs-built_in">this</span>.receiver = receiver;<br>};<br>refreshCommand.prototype.execute = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">this</span>.receiver.refresh();<br>};<br><br><span class="hljs-comment">// 创建命令对象</span><br><span class="hljs-keyword">var</span> refresh = <span class="hljs-keyword">new</span> refreshCommand(MenuBar);<br><br><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];<br>setCommand(btn, refresh);<br></code></pre></td></tr></table></figure><h3 id="js-中的命令模式"><a href="#js-中的命令模式" class="headerlink" title="js 中的命令模式"></a>js 中的命令模式</h3><p>在 oop 的命名模式中，通常需要把命令封装为一个对象，将接收者存储在对象中。但以上步骤其最终目的是把命令传递到接收者并执行 execute()。 也就是传递一个 function 但在 js 的世界里传递函数是一个理所当然的事儿，而存储 接收者也完全可以用闭包实现。并不需要去 new 一个对象。</p><figure class="highlight javascript"><figcaption><span>command-pattern.js</span><a href="/code/design-pattern/command-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// dom 绑定 click 事件场景</span><br><span class="hljs-comment">// 绑定命令函数</span><br><span class="hljs-keyword">var</span> setCommand = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">button, command</span>) </span>{<br>  button.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    command.execute();<br>  };<br>};<br><br><span class="hljs-comment">// 封装命令方法</span><br><span class="hljs-keyword">var</span> MenuBar = {<br>  <span class="hljs-attr">refresh</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;刷新&#x27;</span>);<br>  },<br>};<br><br><span class="hljs-comment">// 使用闭包直接传递</span><br><span class="hljs-keyword">var</span> refreshCommand = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> {<br>      <span class="hljs-attr">execute</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>        receiver.refresh();<br>      },<br>    };<br>  };<br>};<br><br><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];<br>setCommand(btn, refresh);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-发布订阅模式</title>
    <link href="/2021/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>发布订阅模式对于前端而言，再熟悉不过了。vue2 的基础就是一个发布订阅模式， addEvenListener 同样是一个发布订阅模式</p><h3 id="发布订阅模式通用实现"><a href="#发布订阅模式通用实现" class="headerlink" title="发布订阅模式通用实现"></a>发布订阅模式通用实现</h3><p>不废话直接实现一个</p><figure class="highlight javascript"><figcaption><span>watcher-pattern.js</span><a href="/code/design-pattern/watcher-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> events = {<br>  <span class="hljs-attr">clientList</span>: [],<br>  <span class="hljs-attr">listener</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">client, cb</span>) </span>{<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.clientList[client]) {<br>      <span class="hljs-built_in">this</span>.clientList[client] = [];<br>    } <span class="hljs-keyword">else</span> {<br>      <span class="hljs-built_in">this</span>.clientList[client].push(cb);<br>    }<br>  },<br>  <span class="hljs-attr">trigger</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">client, ...rest</span>) </span>{<br>    <span class="hljs-keyword">var</span> cbs = <span class="hljs-built_in">this</span>.clientList[client];<br>    <span class="hljs-keyword">if</span> (!cbs || !cbs.length) {<br>      <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; cbs.length; i++) {<br>      <span class="hljs-keyword">const</span> cb = cbs[i];<br>      cb.apply(<span class="hljs-built_in">this</span>, rest);<br>    }<br>  },<br>};<br><br>events.listener(<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// events</span><br>  <span class="hljs-built_in">console</span>.log(args); <span class="hljs-comment">// [1,2,3]</span><br>});<br><br>events.trigger(<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>发布订阅模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-迭代器模式</title>
    <link href="/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。</p><span id="more"></span><h3 id="实现自己的迭代器"><a href="#实现自己的迭代器" class="headerlink" title="实现自己的迭代器"></a>实现自己的迭代器</h3><figure class="highlight javascript"><figcaption><span>iterator-pattern.js</span><a href="/code/design-pattern/iterator-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> each = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arr, callback</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>    <span class="hljs-keyword">const</span> element = arr[i];<br>    <span class="hljs-comment">// 保持callback 内部 this 指向自己,参数传入当前对象和下标</span><br>    callback.call(element, element, i);<br>  }<br>};<br><br>each([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(item, index);<br>});<br></code></pre></td></tr></table></figure><h4 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h4><p>上面的 each 函数就是一个内部迭代器，内部已经把迭代规则写好了，外部不用关心内部实现</p><h4 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h4><figure class="highlight javascript"><figcaption><span>form:13</span><a href="/code/design-pattern/iterator-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> each = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arr, callback</span>) </span>{<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) {<br>    <span class="hljs-keyword">const</span> element = arr[i];<br>    <span class="hljs-comment">// 保持callback 内部 this 指向自己,参数传入当前对象和下标</span><br>    callback.call(element, element, i);<br>  }<br>};<br><br>each([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(item, index);<br>});<br><br><span class="hljs-keyword">var</span> Iterator = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>{<br>  <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">var</span> next = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    current += <span class="hljs-number">1</span>;<br>  };<br>  <span class="hljs-keyword">var</span> isDone = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    current &gt;= obj.length;<br>  };<br><br>  <span class="hljs-keyword">var</span> getCurrentItem = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> obj[current];<br>  };<br><br>  <span class="hljs-keyword">return</span> {<br>    next,<br>    isDone,<br>    getCurrentItem,<br>  };<br>};<br></code></pre></td></tr></table></figure><p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迭代器模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-代理模式</title>
    <link href="/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求做出一些处理之后，再把请求转交给本体对象。</p><span id="more"></span><h3 id="代理模式实现图片预加载"><a href="#代理模式实现图片预加载" class="headerlink" title="代理模式实现图片预加载"></a>代理模式实现图片预加载</h3><figure class="highlight javascript"><figcaption><span>form:1</span><a href="/code/design-pattern/proxy-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> MyImg = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;img&#x27;</span>);<br>  <span class="hljs-built_in">document</span>.body.appendChild(img);<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">setSrc</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) </span>{<br>      img.src = src;<br>    },<br>  };<br>})();<br><br><span class="hljs-keyword">var</span> ProxyImg = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();<br>  img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">// 这里this 只想 img 标签</span><br>    MyImg.setSrc(<span class="hljs-built_in">this</span>.src);<br>  };<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">setImage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) </span>{<br>      MyImg.setSrc(<span class="hljs-string">&#x27;loading.gif&#x27;</span>);<br>      img.src = src;<br>    },<br>  };<br>})();<br><br>ProxyImg.setImage(<span class="hljs-string">&#x27;src.png&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>现在我们通过 proxyImage 间接地访问 MyImage。proxyImage 控制了客户对 MyImage 的访问，并且在此过程中加入一些额外的操作，比如在真正的图片加载好之前，先把 img 节点的 src 设置为一张本地的 loading 图片</p></blockquote><p>当然这里实际上不用代理也是可以实现的。 将 img.onload 事件放入 MyImg 即可,但是这样违法了”单一职责原则”</p><blockquote><p>单一职责原则指的是，就一个类（通常也包括对象和函数等）而言,应该仅有一个引起它变化的原因。如果一个对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可能会有多个,过多的职责耦合会导致代码脆弱和低内聚。</p></blockquote><h3 id="js-中的注意事项"><a href="#js-中的注意事项" class="headerlink" title="js 中的注意事项"></a>js 中的注意事项</h3><p>由于 js 是动态类型语言,因此我们无法判断接口是否符合协议,需要人工对代理对象的接口一致性做出约束</p><h3 id="缓存代理工厂"><a href="#缓存代理工厂" class="headerlink" title="缓存代理工厂"></a>缓存代理工厂</h3><figure class="highlight javascript"><figcaption><span>form:27</span><a href="/code/design-pattern/proxy-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> MyImg = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;img&#x27;</span>);<br>  <span class="hljs-built_in">document</span>.body.appendChild(img);<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">setSrc</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) </span>{<br>      img.src = src;<br>    },<br>  };<br>})();<br><br><span class="hljs-keyword">var</span> ProxyImg = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();<br>  img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">// 这里this 只想 img 标签</span><br>    MyImg.setSrc(<span class="hljs-built_in">this</span>.src);<br>  };<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">setImage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) </span>{<br>      MyImg.setSrc(<span class="hljs-string">&#x27;loading.gif&#x27;</span>);<br>      img.src = src;<br>    },<br>  };<br>})();<br><br>ProxyImg.setImage(<span class="hljs-string">&#x27;src.png&#x27;</span>);<br><br><span class="hljs-comment">// 乘积</span><br><span class="hljs-keyword">var</span> mult = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) {<br>    <span class="hljs-keyword">const</span> element = <span class="hljs-built_in">arguments</span>[i];<br>    a = a * element;<br>  }<br>  <span class="hljs-keyword">return</span> a;<br>};<br><br><span class="hljs-comment">// 代理缓存工厂</span><br><br><span class="hljs-keyword">var</span> createProxyFactory = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>{<br>  <span class="hljs-keyword">var</span> cache = {};<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">Array</span>.prototype.join.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (arr <span class="hljs-keyword">in</span> cache) {<br>      <span class="hljs-keyword">return</span> cache[arr];<br>    }<br>    <span class="hljs-keyword">return</span> (cache[arr] = fn(<span class="hljs-built_in">arguments</span>));<br>  };<br>};<br><br><span class="hljs-keyword">var</span> proxyMult = createProxyFactory(mult);<br><br><span class="hljs-built_in">console</span>.log(proxyMult(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br><span class="hljs-built_in">console</span>.log(proxyMult(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>策略模式的实现并不复杂，关键是如何从策略模式的实现背后，找到封装变化、委托和多态性这些思想的价值。</p><span id="more"></span><h3 id="策略模式更多的是一种思想"><a href="#策略模式更多的是一种思想" class="headerlink" title="策略模式更多的是一种思想"></a>策略模式更多的是一种思想</h3><p>策略模式指的是定义一系列的算法，并且把它们封装起来。</p><p>从定义上看，策略模式就是用来封装算法的。但如果把策略模式仅仅用来封装算法，未免有一点大材小用。在实际开发中，我们通常会把算法的含义扩散开来，使策略模式也可以用来封装一系列的“业务规则”。只要这些业务规则指向的目标一致，并且可以被替换使用，我们就可以用策略模式来封装它们。</p><ol><li>策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。</li><li>策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，易于理解，易于扩展。</li><li>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。</li><li>在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</li></ol><p>实际上在 JavaScript 这种将函数作为一等对象的语言里，策略模式已经融入到了语言本身当中，我们经常用高阶函数来封装不同的行为，并且把它传递到另一个函数中。当我们对这些函数发出“调用”的消息时，不同的函数会返回不同的执行结果。在 JavaScript 中，“函数对象的多态性”来得更加简单。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>策略模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。实现并不复杂</p><span id="more"></span><h3 id="js-中使用-OOP-的形式实现的单例模式"><a href="#js-中使用-OOP-的形式实现的单例模式" class="headerlink" title="js 中使用 OOP 的形式实现的单例模式"></a>js 中使用 OOP 的形式实现的单例模式</h3><figure class="highlight javascript"><figcaption><span>singleton-pattern.js</span><a href="/code/design-pattern/singleton-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 通过自执行函数+闭包 实现</span><br><span class="hljs-keyword">var</span> CreateDiv = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> instants = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">var</span> CreateDiv = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">html</span>) </span>{<br>    <span class="hljs-keyword">if</span> (instants) {<br>      <span class="hljs-keyword">return</span> instants;<br>    }<br>    <span class="hljs-built_in">this</span>.html = html;<br>    <span class="hljs-built_in">this</span>.init();<br>    instants = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">return</span> instants;<br>  };<br>  CreateDiv.prototype.init = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">html</span>) </span>{<br>    <span class="hljs-built_in">this</span>.html = html;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.innerHTML = <span class="hljs-built_in">this</span>.html;<br>    <span class="hljs-built_in">document</span>.appendChild(div);<br>  };<br>  <span class="hljs-keyword">return</span> CreateDiv;<br>})();<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> CreateDiv();<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> CreateDiv();<br><span class="hljs-comment">// a === b</span><br></code></pre></td></tr></table></figure><p>当然以上形式违反了“单一职责原则”,因为 CreateDiv 的构造函数做了 2 件事： 1.判断单例 2.执行 init 初始化<br>当有一天我们不需要创建单例的 div 时就要重新改造构造函数了. 可以用代理优化一下</p><h4 id="用代理实现单例"><a href="#用代理实现单例" class="headerlink" title="用代理实现单例"></a>用代理实现单例</h4><figure class="highlight javascript"><figcaption><span>singleton-pattern.js</span><a href="/code/design-pattern/singleton-pattern.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 用代理实现单例</span><br><span class="hljs-keyword">var</span> CreateDiv = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">html</span>) </span>{<br>  <span class="hljs-built_in">this</span>.html = html;<br>  <span class="hljs-built_in">this</span>.init();<br>};<br>CreateDiv.prototype.init = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">html</span>) </span>{<br>  <span class="hljs-built_in">this</span>.html = html;<br>  <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>  div.innerHTML = <span class="hljs-built_in">this</span>.html;<br>  <span class="hljs-built_in">document</span>.appendChild(div);<br>};<br><br><span class="hljs-keyword">var</span> ProxySingletonCreateDiv = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">var</span> instants = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">html</span>) </span>{<br>    <span class="hljs-keyword">if</span> (!instants) {<br>      instants = <span class="hljs-keyword">new</span> CreateDiv(html);<br>    }<br>    <span class="hljs-keyword">return</span> instants;<br>  };<br>})();<br><br><span class="hljs-keyword">var</span> a = ProxySingletonCreateDiv(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">var</span> b = ProxySingletonCreateDiv(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-comment">// a === b</span><br></code></pre></td></tr></table></figure><p>这段代码实现一下特性:</p><ol><li><p>单例判断移出到 proxy 中,保持 CreateDiv 功能单一</p></li><li><p>这里用一个自执行函数封装 proxy 方法,不污染全局变量</p></li><li><p>使用闭包保持内部 instants 可持续缓存</p></li><li><p>在需要的时候再创建对象(惰性)</p></li></ol><h3 id="使用-js-中的单例"><a href="#使用-js-中的单例" class="headerlink" title="使用 js 中的单例"></a>使用 js 中的单例</h3><p>前面我们使用的 OOP 的思想来实现的单例模式,但 js 是一个无类(class-free) 语言,也正因为如此，生搬单例模式的概念并无意义。在 JavaScript 中创建对象的方法非常简单，既然我们只需要一个“唯一”的对象，为什么要为它先创建一个“类”呢？传统的单例模式实现在 JavaScript 中并不适用。</p><blockquote><p>单例模式的核心是确保只有一个实例，并提供全局访问。</p></blockquote><p>那么在 js 的世界里，全局变量基本上可以满足单例模式的条件,但全局变量并不是单例模式。但却可以当作单例模式来使用</p><p>为了避免全局变量的滥用,我们可以使用 命名空间/闭包封装私有变量 来实现</p><ol><li>命名空间:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> namespace = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;,<br>  <span class="hljs-attr">b</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>闭包</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> glob = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> instants = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    getInstants = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> instants<br>    &#125;<br>  &#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><h4 id="通用惰性单例"><a href="#通用惰性单例" class="headerlink" title="通用惰性单例"></a>通用惰性单例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getSingle = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> res = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">return</span> (res || res = fn.apply(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">arguments</span>)) <span class="hljs-comment">// apply 确保 fn 内部能访问到全局对象 windows</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解CORS请求</title>
    <link href="/2021/08/15/%E8%AF%A6%E8%A7%A3CORS%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/08/15/%E8%AF%A6%E8%A7%A3CORS%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>CORS 是什么？ 为什么浏览器会发个 options 请求？可以不发么？ <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">本文参考自阮大的文章</a></p><span id="more"></span><h1 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h1><p>浏览器对于简单请求和非简单请求处理是不一样的！！！</p><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><p>简单请求满足条件：</p><ul><li>method ： HEAD,GET,POST 之一</li><li>http 头：Accept,Accept-Language,Content-Language,Last-Event-ID,Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><h3 id="CORS-头"><a href="#CORS-头" class="headerlink" title="CORS 头"></a>CORS 头</h3><p>对于简单请求，浏览器直接发出 CORS 请求, 实际上就是在头信息中 增加一个 <strong>Origin</strong> 请求</p><p>下面是一个例子，浏览器发现这次跨源 AJAX 请求是简单请求，就自动在头信息之中，添加一个 <strong>Origin</strong> 字段。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/cors</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://api.bob.com<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>api.alice.com<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0...<br></code></pre></td></tr></table></figure><p>上面的头信息中，Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><ul><li>不在许可范围内，<br>浏览器还是会正常返回 http 回应, 但<strong>浏览器发现</strong> 没有 <strong>Access-Control-Allow-Origin</strong> 就知道服务器不允许本次请求, 浏览器就会报错,在 XMLHttpRequest 的 onerror 中捕获。 (注意:状态码是无法识别的,服务器很可能返回 200)</li><li>在许可范围内 响应会多几个头字段 如下：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">Access-Control-Allow-Origin: http:<span class="hljs-regexp">//</span>api.bob.com <span class="hljs-regexp">//</span> 该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。<br>Access-Control-Allow-Credentials: true <span class="hljs-regexp">//</span> 是否允许 cookie 一起发送给服务器<br>Access-Control-Expose-Headers: FooBar <span class="hljs-regexp">//</span> 限定 XMLHttpRequest对象的getResponseHeader() 方法能拿到除默认的字段以外的值(这里XMLHttpRequest对象的getResponseHeader能拿到 FooBar ),<br>Content-Type: text/html; charset=utf-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h3><p>注意：服务器虽然返回了 Control-Allow-Credentials: true。 如果浏览器端不设置 withCredentials 还是不会发送 cookie 给服务器。</p><ul><li>对于 cookies 是一个双方的约定，有一方不接受 就无法发送/接受</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-type">XMLHttpRequest</span>();<br>xhr.withCredentials = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><blockquote><p>注意： 如果要发送 cookie Access-Control-Allow-Origin 就不能设置为 * （cookie 的同源策略）</p></blockquote><h2 id="非简单请求（这个时候就要发-options-了）"><a href="#非简单请求（这个时候就要发-options-了）" class="headerlink" title="非简单请求（这个时候就要发 options 了）"></a>非简单请求（这个时候就要发 options 了）</h2><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json</p><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为”预检”请求（preflight）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错</p><h3 id="“预检”请求"><a href="#“预检”请求" class="headerlink" title="“预检”请求"></a>“预检”请求</h3><p>非简单请求：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> <span class="hljs-built_in">url</span> = <span class="hljs-string">&#x27;http://api.alice.com/cors&#x27;</span>;<br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>xhr.open(<span class="hljs-string">&#x27;PUT&#x27;</span>, <span class="hljs-built_in">url</span>, <span class="hljs-literal">true</span>);<br>xhr.setRequestHeader(<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>);<br>xhr.send();<br></code></pre></td></tr></table></figure><p>浏览器发现是<strong>非简单请求</strong> 就会发出 “预检”请求，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">OPTIONS</span> <span class="hljs-string">/cors</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://api.bob.com<br><span class="hljs-attribute">Access-Control-Request-Method</span><span class="hljs-punctuation">: </span>PUT   // 即将用到的请求方法<br><span class="hljs-attribute">Access-Control-Request-Headers</span><span class="hljs-punctuation">: </span>X-Custom-Header // 额外发送的自定义头<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>api.alice.com<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0...<br><br></code></pre></td></tr></table></figure><h3 id="“预检”回应"><a href="#“预检”回应" class="headerlink" title="“预检”回应"></a>“预检”回应</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Mon, 01 Dec 2008 01:15:39 GMT<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>Apache/2.0.61 (Unix)<br><span class="hljs-attribute">Access-Control-Allow-Origin</span><span class="hljs-punctuation">: </span>http://api.bob.com  // 表示可以接受的来源地址<br><span class="hljs-attribute">Access-Control-Allow-Methods</span><span class="hljs-punctuation">: </span>GET, POST, PUT // 接受的方法<br><span class="hljs-attribute">Access-Control-Allow-Headers</span><span class="hljs-punctuation">: </span>X-Custom-Header // 接受的自定义头<br><span class="hljs-attribute">Access-Control-Max-Age</span><span class="hljs-punctuation">: </span>1728000 // 本次预检 有效期（秒），有效期内不在发&quot;预检&quot;请求，走**简单请求的逻辑**<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=utf-8<br><span class="hljs-attribute">Content-Encoding</span><span class="hljs-punctuation">: </span>gzip<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>0<br><span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">: </span>timeout=2, max=100<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>Keep-Alive<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/plain<br></code></pre></td></tr></table></figure><p>如果服务器否定了”预检”请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 XMLHttpRequest 对象的 onerror 回调函数捕获。控制台会打印出如下的报错信息。</p><figure class="highlight javascript"><figcaption><span>promise1.js</span><a href="/code/promise/promise1.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>      onFulfilled(<span class="hljs-built_in">this</span>.value);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>      onRejected(<span class="hljs-built_in">this</span>.reason);<br>    }<br>  };<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CORS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>esbuild为什么这么快</title>
    <link href="/2021/08/15/esbuild%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB/"/>
    <url>/2021/08/15/esbuild%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB/</url>
    
    <content type="html"><![CDATA[<p>esbuild</p><span id="more"></span><h1 id="为什么这么快？"><a href="#为什么这么快？" class="headerlink" title="为什么这么快？"></a>为什么这么快？</h1><ol><li>使用 go 编写的, 可以编译为本地代码</li></ol><ul><li>在 esbuild 忙于解析 JavaScript 时，node 忙于解析打包程序自己的 JavaScript。</li><li>go 可以在线程间 共享内存 而 js 必须在线程间序列化数据</li></ul><ol start="2"><li><p>go 用了大量并行操作</p></li><li><p>代码都是自己写的没有第三方依赖</p></li></ol><ul><li>减少了数据结构转换带来的性能消耗</li></ul><ol start="4"><li>内存利用率高</li></ol><ul><li>对 ast 遍历 只用了 3 次 (此法分析/解析/作用域设置/声明符号, )</li></ul><!-- <figure class="highlight javascript"><figcaption><span>promise1.js</span><a href="/code/promise/promise1.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>      onFulfilled(<span class="hljs-built_in">this</span>.value);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>      onRejected(<span class="hljs-built_in">this</span>.reason);<br>    }<br>  };<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure> --><!-- TODO: 未完待续 -->]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么理解Commonjs和ESModule</title>
    <link href="/2021/08/13/%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3Commonjs%E5%92%8CESModule/"/>
    <url>/2021/08/13/%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3Commonjs%E5%92%8CESModule/</url>
    
    <content type="html"><![CDATA[<p>关于 commonjs 和 ES Module 本质的思考 <a href="https://juejin.cn/post/6994224541312483336">本文摘自掘金</a></p><span id="more"></span><h1 id="先来几个问题"><a href="#先来几个问题" class="headerlink" title="先来几个问题"></a>先来几个问题</h1><p>1 Commonjs 和 Es Module 有什么区别 ？<br>2 Commonjs 如何解决的循环引用问题 ？<br>3 既然有了 exports，为何又出了 module.exports ? 既生瑜，何生亮 ？<br>4 require 模块查找机制 ？<br>5 Es Module 如何解决循环引用问题 ？<br>6 exports = {} 这种写法为何无效 ？<br>7 关于 import() 的动态引入 ？<br>8 Es Module 如何改变模块下的私有变量 ？</p><h1 id="commonjs-说起"><a href="#commonjs-说起" class="headerlink" title="commonjs 说起"></a>commonjs 说起</h1><h2 id="commonjs-使用"><a href="#commonjs-使用" class="headerlink" title="commonjs 使用"></a>commonjs 使用</h2><p>在使用 规范下，有几个显著的特点。</p><ul><li>在 commonjs 中每一个 js 文件都是一个单独的模块，我们可以称之为 module；</li><li>该模块中，包含 CommonJS 规范的核心变量: exports、module.exports、require；</li><li>exports 和 module.exports 可以负责对模块中的内容进行导出；</li><li>require 函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容；</li></ul><h3 id="先看看如何使用的"><a href="#先看看如何使用的" class="headerlink" title="先看看如何使用的"></a>先看看如何使用的</h3><ul><li>导出</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;小唐同学&#x27;</span>;<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> name;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sayName = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./hello.js&#x27;</span>);<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: sayName(),<br>    <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;我不是外星人&#x27;</span>,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>思考 2 个问题：</p><ul><li>commonjs 如何解决变量污染的</li><li>module.exports exports require 三者如何工作的？</li></ul><h2 id="commonjs-实现原理"><a href="#commonjs-实现原理" class="headerlink" title="commonjs 实现原理"></a>commonjs 实现原理</h2><p>已知条件：每个模块上存在 module , exports , require , <code>__filename</code> ,<code>___dirname</code> ,虽然我们没有对其定义但可以直接使用</p><ul><li>module :用于记录模块信息</li><li>exports : 当前模块导出的属性</li><li>require : 引入模块</li><li><code>__filename</code> : 当前模块文件的绝对路径 /a/b/c.js</li><li><code>__dirname</code> : 当前模块的目录路径 /a/b</li></ul><p>在编译的过程中，实际 Commonjs 对 js 的代码块进行了首尾包装， 我们以上述的代码为例子，它被包装之后的样子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">exports</span>, <span class="hljs-built_in">require</span>, <span class="hljs-built_in">module</span>, __filename, __dirname</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;小唐同学&#x27;</span>;<br>  <span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在 Commonjs 规范下模块中，会形成一个包装函数，我们写的代码将作为包装函数的执行上下文，使用的 require ，exports ，module 本质上是通过形参的方式传递到包装函数中的。</p><p>大概是这样:</p><figure class="highlight javascript"><figcaption><span>common.js</span><a href="/code/commonjs和ESModule.js/common.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 包装函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">script</span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`(function (exports, require, module, __filename, __dirname) {</span><br><span class="hljs-string">    <span class="hljs-subst">${script}</span></span><br><span class="hljs-string">  })`</span>;<br>}<br><br><span class="hljs-comment">// 使用wrapper</span><br><span class="hljs-keyword">const</span> fun = wrapper(<span class="hljs-string">`</span><br><span class="hljs-string">  let name = &#x27;小唐同学&#x27;;</span><br><span class="hljs-string">  console.log(name)</span><br><span class="hljs-string">  module.exports = function sayName() {</span><br><span class="hljs-string">    return name;</span><br><span class="hljs-string">  };</span><br><span class="hljs-string">`</span>);<br><br><span class="hljs-built_in">console</span>.log(fun); <span class="hljs-comment">// fun 这个时候返回的是一个字符串  还不能执行</span><br><br><span class="hljs-comment">// 大概是这个样子</span><br><span class="hljs-comment">// runInThisContext(fun)(module.exports, require, module, __filename, __dirname);</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runInThisContext</span>(<span class="hljs-params">fun</span>) </span>{<br>  <span class="hljs-built_in">eval</span>(fun);<br>}<br></code></pre></td></tr></table></figure><h2 id="commonjs-文件加载流程"><a href="#commonjs-文件加载流程" class="headerlink" title="commonjs 文件加载流程"></a>commonjs 文件加载流程</h2><p><img src="/images/require%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.webp" alt="缓存执行流程"></p><h3 id="文件引入流程与处理"><a href="#文件引入流程与处理" class="headerlink" title="文件引入流程与处理"></a>文件引入流程与处理</h3><p>commonjs 模块同步加载并执行文件模块, 在执行阶段分析模块依赖, 采用深度优先遍历，执行顺序为 父-&gt; 子-&gt; 父</p><figure class="highlight javascript"><figcaption><span>a.js</span><a href="/code/commonjs和ESModule.js/a.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// const getMsg = require(&#x27;./b&#x27;);</span><br><br><span class="hljs-comment">// console.log(&#x27;加载a 文件&#x27;);</span><br><br><span class="hljs-comment">// exports.say = function () {</span><br><span class="hljs-comment">//   const msg = getMsg();</span><br><span class="hljs-comment">//   console.log(msg);</span><br><span class="hljs-comment">// };</span><br><br><span class="hljs-built_in">exports</span> = {<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">123</span>,<br>};<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>b.js</span><a href="/code/commonjs和ESModule.js/b.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> say = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br><span class="hljs-keyword">const</span> object = {<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小唐同学&#x27;</span>,<br>};<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b 模块中打印 say&#x27;</span>, say); <span class="hljs-comment">// 这个时候由于 a.js 虽然打上了 cache 标记  还没有加载完成 loaded =false 所以这个时候是 {}</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;加载 b 文件&#x27;</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;异步中的&#x27;</span>, say);<br>}, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">return</span> object;<br>};<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>main.js</span><a href="/code/commonjs和ESModule.js/main.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br><span class="hljs-keyword">const</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./b&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;main 执行&#x27;</span>);<br></code></pre></td></tr></table></figure><p>node main.js 执行结果：</p><p>(结果)[/images/main 执行结果.png]</p><p>根据结果可以得出一下结论</p><ul><li><code>main.js</code> 和 <code>a.js</code> 都引入了 <code>b.js</code> 但是 <code>b.js</code> 只执行了一次</li><li><code>a.js</code> 和 <code>b.js</code> 模块相互引用, 但是<strong>没有</strong>出现循环引用</li><li>执行顺序 父-&gt; 子 -&gt; 父</li></ul><p>问题来了。 commonjs 如何实现以上效果的</p><h2 id="require-加载原理"><a href="#require-加载原理" class="headerlink" title="require 加载原理"></a>require 加载原理</h2><p>需要明白 2 个概念 module 和 Module</p><p>module: 在 node 中 每个 js 文件 都是一个 module , module 上保存了 exports 等信息之外还有一个 loaded 表示该模块是否被加载</p><p>Module: node 整个系统运行之后, 会用 Module 缓存每个模块的加载信息</p><figure class="highlight javascript"><figcaption><span>require.js</span><a href="/code/commonjs和ESModule.js/require.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">require</span>(<span class="hljs-params">id</span>) </span>{<br>  <span class="hljs-comment">// 缓存已加载的模块</span><br>  <span class="hljs-keyword">const</span> cache = Module._cache[id];<br><br>  <span class="hljs-comment">//  已经加载过 则直接取走 exports</span><br>  <span class="hljs-keyword">if</span> (cache) {<br>    <span class="hljs-keyword">return</span> cache.exports;<br>  }<br><br>  <span class="hljs-comment">// 创建 module</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> = { <span class="hljs-attr">exports</span>: {}, <span class="hljs-attr">loaded</span>: <span class="hljs-literal">false</span> };<br><br>  Module._cache[id] = <span class="hljs-built_in">module</span>;<br><br>  <span class="hljs-comment">// 加载文件</span><br>  runInThisContext(wrapper(<span class="hljs-string">&#x27;module.exports = 123&#x27;</span>))(<br>    <span class="hljs-built_in">module</span>.exports,<br>    <span class="hljs-built_in">require</span>,<br>    <span class="hljs-built_in">module</span>,<br>    __filename,<br>    __dirname,<br>  );<br><br>  <span class="hljs-comment">// 加载完成标记</span><br>  <span class="hljs-built_in">module</span>.loaded = <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>.exports;<br>}<br></code></pre></td></tr></table></figure><p>require 大致流程：</p><ul><li><p>require 会接收一个参数——文件标识符，然后分析定位文件，分析过程我们上述已经讲到了，接下来会从 Module 上查找有没有缓存，如果有缓存，那么直接返回缓存的内容。</p></li><li><p>如果没有缓存，会创建一个 module 对象，缓存到 Module 上，然后执行文件，<strong>加载完文件</strong>，将 loaded 属性<strong>设置为 true</strong> ，然后返回 module.exports 对象。借此完成模块加载流程。</p></li><li><p>模块导出就是 return 这个变量的其实跟 a = b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。</p></li><li><p>exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports， 所以对 exports 进行赋值会导致 exports 操作的不再是 module.exports 的引用。</p></li></ul><h3 id="require-如何避免重复加载的"><a href="#require-如何避免重复加载的" class="headerlink" title="require 如何避免重复加载的"></a>require 如何避免重复加载的</h3><p>从上面可以了解到。由于有缓存的缘故，对于第二次 require 一个模块 会直接读取缓存的 module 无需再次执行</p><h3 id="require-避免循环引用"><a href="#require-避免循环引用" class="headerlink" title="require 避免循环引用"></a>require 避免循环引用</h3><p>同样是依靠缓存来解决的这个问题 , 已经加载了所以不会再次执行.<br>但有一点需要注意。</p><blockquote><p>由于 a.js 虽然打上了 cache 标记 还没有加载完成 (loaded =false) 所以这个时候是 {} 空对象</p></blockquote><p>(结果)[/images/mian 异步执行结果.png]</p><h3 id="exports-和-module-exports"><a href="#exports-和-module-exports" class="headerlink" title="exports 和 module.exports"></a>exports 和 module.exports</h3><p>系统分析完 require ，接下来我们分析一下，exports 和 module.exports，首先看一下两个的用法。</p><h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.name = <span class="hljs-string">`小唐`</span>;<br><span class="hljs-built_in">exports</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">666</span>);<br>&#125;;<br><br><span class="hljs-comment">// 引用</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><p>exports 就是传入到当前模块内的一个对象，本质上就是 module.exports。</p><p>问题：为什么 exports={} 直接赋值一个对象就不可以呢？ 比如我们将如上 a.js 修改一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span> = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">123</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>(结果)[/images/export 使用.png]</p><p>理想情况下是通过 exports = {} 直接赋值，不需要在 exports.a = xxx 每一个属性，但是如上我们看到了这种方式是无效的。为什么会这样？实际这个是 js 本身的特性决定的。</p><blockquote><p>通过上述讲解都知道 exports ， module 和 require 作为形参的方式传入到 js 模块中。我们直接 exports = {} 修改 exports ，等于重新赋值了形参，那么会重新赋值一份，但是不会在引用原来的形参()。举一个简单的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wrap</span>(<span class="hljs-params">myExports</span>) </span>&#123;<br>  myExports = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;我不是外星人&#x27;</span>,<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> myExports = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;alien&#x27;</span>,<br>&#125;;<br>wrap(myExports);<br><span class="hljs-built_in">console</span>.log(myExports); <span class="hljs-comment">// &#123;name : &#x27;alien&#x27;&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>我们期望修改 myExports ，但是没有任何作用。<br>假设 wrap 就是 Commonjs 规范下的包装函数，我们的 js 代码就是包装函数内部的内容。当我们把 myExports 对象传进去，但是直接赋值 myExports = { name:’我不是外星人’ } 没有任何作用，相等于内部重新声明一份 myExports 而和外界的 myExports 断绝了关系。所以解释了为什么不能 exports={…} 直接赋值。</p></blockquote><h4 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h4><p>module.exports 本质上就是 exports ，我们用 module.exports 来实现如上的导出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;《React进阶实践指南》&#x27;</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;我不是外星人&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">666</span>);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>从上述 require 原理实现中，我们知道了 exports 和 module.exports 持有相同引用，因为最后导出的是 module.exports 。那么这就说明在一个文件中，我们最好选择 exports 和 module.exports 两者之一，如果两者同时存在，很可能会造成覆盖的情况发生。比如如下情况：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.name = <span class="hljs-string">&#x27;alien&#x27;</span>; <span class="hljs-comment">// 此时 exports.name 是无效的</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;《React进阶实践指南》&#x27;</span>,<br>  <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;我不是外星人&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">666</span>);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><p>1 那么问题来了？既然有了 exports，为何又出了 module.exports?</p><p>答：如果我们不想在 commonjs 中导出对象，而是只导出一个类或者一个函数再或者其他属性的情况，那么 module.exports 就更方便了，如上我们知道 exports 会被初始化成一个对象，也就是我们只能在对象上绑定属性，但是我们可以通过 module.exports 自定义导出 除去对象外的其他类型元素。</p><p>2 与 exports 相比，module.exports 有什么缺陷 ？</p><p>答：module.exports 当导出一些函数等非对象属性的时候，也有一些风险，就比如循环引用的情况下。对象会保留相同的内存地址，就算一些属性是后绑定的，也能间接通过异步形式访问到。但是如果 module.exports 为一个非对象其他属性类型，在循环引用的时候，就容易造成属性丢失的情况发生了。</p><h1 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h1><p>Nodejs 借鉴了 Commonjs 实现了模块化 ，从 ES6 开始， JavaScript 才真正意义上有自己的模块化规范，</p><p>Es Module 的产生有很多优势，比如:</p><ul><li>借助 Es Module 的静态导入导出的优势，实现了 tree shaking。</li><li>Es Module 还可以 import() 懒加载方式实现代码分割。</li></ul><p>具体用法就不细说了</p><h2 id="ES-Module-特性"><a href="#ES-Module-特性" class="headerlink" title="ES Module 特性"></a>ES Module 特性</h2><ol><li>静态语法</li></ol><p>ES6 module 的引入和导出是静态的，import 会自动提升到代码的顶层 ，import , export 不能放在块级作用域或条件语句中。</p><ol start="2"><li>执行特性</li></ol><p>ES6 module 和 Common.js 一样，对于相同的 js 文件，会保存静态属性。</p><p>但是与 Common.js 不同的是 ，CommonJS 模块同步加载并执行模块文件，ES6 模块提前加载并执行模块文件，ES6 模块在预处理阶段分析模块依赖，在执行阶段执行模块，两个阶段都采用深度优先遍历，执行顺序是 <strong>子 -&gt; 父</strong>（入口文件最后执行）。</p><p>为了验证这一点，看一下如下 demo。</p><figure class="highlight javascript"><figcaption><span>main.js</span><a href="/code/commonjs和ESModule.js/es/main.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;main.js开始执行&#x27;</span>);<br><span class="hljs-keyword">import</span> say <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span>;<br><span class="hljs-keyword">import</span> say1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./b&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;main.js执行完毕&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>a.js</span><a href="/code/commonjs和ESModule.js/es/a.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> b <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./b&#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a模块加载&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span> (<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello , world&#x27;</span>)<br>}<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>b.js</span><a href="/code/commonjs和ESModule.js/es/b.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;b模块加载&#x27;</span>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello,world&#x27;</span>);<br>}<br></code></pre></td></tr></table></figure><p>结果：<br><img src="/images/es%E6%89%A7%E8%A1%8C.webp" alt="main.js执行结果"></p><ol start="3"><li>导出绑定</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> addNumber = <span class="hljs-function">() =&gt;</span> &#123;<br>  num++;<br>&#125;;<br><br><span class="hljs-keyword">import</span> &#123; num, addNumber &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./a&#x27;</span>;<br>num = <span class="hljs-number">2</span>; <span class="hljs-comment">// 直接修改则报错</span><br></code></pre></td></tr></table></figure><p>接下来对 import 属性作出总结：</p><ul><li>使用 import 被导入的模块运行在严格模式下。</li><li>使用 import 被导入的变量是只读的，可以理解默认为 const 装饰，无法被赋值</li><li>使用 import 被导入的变量是与原变量绑定/引用的，可以理解为 import 导入的变量无论是否为基本类型都是引用传递。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="commonjs："><a href="#commonjs：" class="headerlink" title="commonjs："></a>commonjs：</h2><ul><li>CommonJS 模块由 JS 运行时实现。</li><li>CommonJs 是单个值导出，本质上导出的就是 exports 属性。</li><li>CommonJS 是可以动态加载的，对每一个加载都存在缓存，可以有效的解决循环引用问题。</li><li>CommonJS 模块同步加载并执行模块文件。</li></ul><h2 id="ES-Module-1"><a href="#ES-Module-1" class="headerlink" title="ES Module"></a>ES Module</h2><ul><li>ES6 Module 静态的，不能放在块级作用域内，代码发生在编译时。</li><li>ES6 Module 的值是动态绑定的，可以通过导出方法修改，可以直接访问修改结果。</li><li>ES6 Module 可以导出多个属性和方法，可以单个导入导出，混合导入导出。</li><li>ES6 模块提前加载并执行模块文件，</li><li>ES6 Module 导入模块在严格模式下。</li><li>ES6 Module 的特性可以很容易实现 Tree Shaking 和 Code Splitting。</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http缓存</title>
    <link href="/2021/08/11/http%E7%BC%93%E5%AD%98/"/>
    <url>/2021/08/11/http%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>什么是 http 缓存 ? 强缓存和协商缓存区别是什么 ? Cache-Control / Last-Modified / If-Modified-Since / Etag / If-None-Match 分别是什么？</p><span id="more"></span><h3 id="重识-http-缓存"><a href="#重识-http-缓存" class="headerlink" title="重识 http 缓存"></a>重识 http 缓存</h3><p>首先 http 缓存其实<strong>并不是</strong>只有强缓存/协商缓存。 这两个缓存只是 <strong>(私有)浏览器缓存</strong> 的分类。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">参考 MDN</a></p><ul><li>http 缓存分类：<ul><li>(私有)浏览器缓存 : 私有缓存只能用于单独用户</li><li>(共享)代理缓存 : 共享缓存可以被多个用户使用 如 IPS/web 代理服务器</li></ul></li><li>缓存操作目标:<ul><li>一般为 get 请求</li></ul></li></ul><h3 id="缓存控制-http1-1-Cache-control-头"><a href="#缓存控制-http1-1-Cache-control-头" class="headerlink" title="缓存控制 (http1.1:Cache-control 头 )"></a>缓存控制 (http1.1:Cache-control 头 )</h3><blockquote><p>Cache-Control: no-store 没有缓存 -&gt; 每次由客户端发起的请求都会下载完整的响应内容</p></blockquote><blockquote><p>Cache-Control: no-cache 缓存但每次重新验证 -&gt; 有请求发出到服务器(会带上于缓存相关的验证字段), 服务器会验证, 若未过期则返回 304</p></blockquote><blockquote><p>Cache-Control: public 公有缓存 即：(共享)代理缓存-&gt; 可被任何中间人缓存(cdn/代理服务器等)</p></blockquote><blockquote><p>Cache-Control: private 私有缓存 即：(私有)浏览器缓存 -&gt; 中间人无法缓存(如 带有 HTTP 验证信息（帐号密码）的页面)</p></blockquote><blockquote><p>Cache-Control: max-age=N 表示资源能够被缓存（保持新鲜）的最大时间-&gt; max-age 是距离请求发起的时间的秒数。 需要与第一次请求 response 的 age(表示距离上一次有效请求的接收时间 ) 配合判断 .一般用于静态资源</p></blockquote><blockquote><p>Cache-Control: must-revalidate 必须验证 -&gt; 意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。</p></blockquote><h3 id="新鲜度保持"><a href="#新鲜度保持" class="headerlink" title="新鲜度保持"></a>新鲜度保持</h3><h4 id="强缓存阶段-返回-200-from-disk-memory-触发条件：在-URI-输入栏中输入然后回车-通过书签访问"><a href="#强缓存阶段-返回-200-from-disk-memory-触发条件：在-URI-输入栏中输入然后回车-通过书签访问" class="headerlink" title="强缓存阶段:返回 200 from disk/memory (触发条件：在 URI 输入栏中输入然后回车/通过书签访问)"></a>强缓存阶段:返回 200 from disk/memory (触发条件：在 URI 输入栏中输入然后回车/通过书签访问)</h4><p>0.发起请求 判断 max-age &gt; age 则使用缓存。否则开始 协商缓存阶段</p><h4 id="进入协商缓存-返回-304"><a href="#进入协商缓存-返回-304" class="headerlink" title="进入协商缓存:返回 304"></a>进入协商缓存:返回 304</h4><p>1.当客户端发起一个请求时，缓存检索到对应的陈旧资源（ max-age 已经过期），则缓存会先将此请求附加一个 If-None-Match 头(这是浏览器第一次请求 <strong>response</strong> 的 <strong>Etag</strong> 资源标识)，然后发给服务器,检查该资源副本是否是依然还是算新鲜的,若返回 304（无实体信息） 则表示是新鲜的，重置 age = 0</p><p>2.如果没有 max-age 则会找 Expires (上一次有效请求的 response 里的) 的值 和 当前 Date 来判断（http1.0 的方法）</p><p>3.若以上两个都没有 则使用 If-Modified-Since (上一次有效请求的 response 里的 Last-Modified ) ，重新计算 max-age。</p><p>max-age = (Date - Last-Modified ) * 10%</p><p><img src="/images/%E7%BC%93%E5%AD%98%E6%B5%81%E7%A8%8B.png" alt="缓存执行流程"></p><h3 id="点击刷新事件"><a href="#点击刷新事件" class="headerlink" title="点击刷新事件"></a>点击刷新事件</h3><p>当用户点击刷新时如果 head 里面含有 <code>Cache-control: must-revalidate</code> 则也会触发缓存验证</p><h3 id="Vary-验证"><a href="#Vary-验证" class="headerlink" title="Vary 验证"></a>Vary 验证</h3><p>Vary HTTP <strong>响应头</strong>决定了对于后续的<strong>请求头</strong>，如何判断是请求一个新的资源还是使用缓存的文件。</p><blockquote><p>通常用于区分移动端和桌面端的展示内容</p></blockquote><p><img src="/images/vary.png" alt="vary 验证流程"></p><h3 id="改进资源策略-非-http-缓存知识点"><a href="#改进资源策略-非-http-缓存知识点" class="headerlink" title="改进资源策略( 非 http 缓存知识点)"></a>改进资源策略( 非 http 缓存知识点)</h3><p>除了以上的 http 缓存，目前还流行一种改进资源策略的方式来验证缓存。<br>即：验证打包工具 build 时产生的 tag (如配置 webpack.output 的 filename ) 来验证资源是否有更新（通常用于静态资源）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>this的指向问题</title>
    <link href="/2021/08/05/this%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <url>/2021/08/05/this%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>关于 this 的指向一直是一个迷,<br>(这里摘至)[<a href="https://juejin.cn/post/6844903891092389901]">https://juejin.cn/post/6844903891092389901]</a></p><span id="more"></span><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><ul><li>默认绑定一般发生在回调函数,函数直接调用;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 严格模式下是 undefined</span><br>  <span class="hljs-comment">// 非严格模式下是 window</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-comment">//setTimeout的比较特殊</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//严格模式和非严格模式下都是window</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;);<br><br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//严格模式下是undefined</span><br>  <span class="hljs-comment">//非严格模式下是window</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h2><ul><li>这个通俗点用一句话概括就是谁调用就是指向谁</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;joy&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//obj</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">//joy</span><br>  &#125;,<br>&#125;;<br>obj.getName();<br></code></pre></td></tr></table></figure><h2 id="显示绑定-call-apply-bind"><a href="#显示绑定-call-apply-bind" class="headerlink" title="显示绑定 call,apply,bind"></a>显示绑定 call,apply,bind</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;joy&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sam&#x27;</span>,<br>&#125;;<br><br>obj1.getName.call(obj2); <span class="hljs-comment">//obj2 sam</span><br>obj1.getName.apply(obj2); <span class="hljs-comment">//obj2 sam</span><br><span class="hljs-keyword">const</span> fn = obj1.getName.bind(obj2);<br>fn(); <span class="hljs-comment">//obj2 sam</span><br></code></pre></td></tr></table></figure><h2 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Vehicle</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">2</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-keyword">new</span> Vehicle(); <span class="hljs-comment">//this指向Vehicle这个new出来的对象</span><br></code></pre></td></tr></table></figure><h2 id="es6-的箭头函数"><a href="#es6-的箭头函数" class="headerlink" title="es6 的箭头函数"></a>es6 的箭头函数</h2><ul><li>es6 的箭头函数比较特殊,箭头函数 this 为父作用域的 this，不是调用时的 this.</li><li>要知道前四种方式,都是调用时确定,也就是动态的,而箭头函数的 this 指向是静态的,声明的时候就确定了下来.比较符合 js 的词法作用域吧</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.name = <span class="hljs-string">&#x27;win&#x27;</span>;<br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;joy&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>  <span class="hljs-attr">getName</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//其父作用域this是window,所以就是window</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">//win</span><br>  &#125;,<br>  <span class="hljs-attr">getAge</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//通过obj.getAge调用,这里面this是指向obj</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">//所以这里this也是指向obj 所以结果是12</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>    &#125;);<br>  &#125;,<br>&#125;;<br>obj.getName();<br>obj.getAge();<br></code></pre></td></tr></table></figure><h2 id="5-种-this-绑定的优先级"><a href="#5-种-this-绑定的优先级" class="headerlink" title="5 种 this 绑定的优先级"></a>5 种 this 绑定的优先级</h2><blockquote><p>箭头函数 -&gt; new 绑定 -&gt; 显示绑定 call/bind/apply -&gt; 隐式绑定 -&gt; 默认绑定</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>this</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写bind</title>
    <link href="/2021/08/04/%E6%89%8B%E5%86%99bind/"/>
    <url>/2021/08/04/%E6%89%8B%E5%86%99bind/</url>
    
    <content type="html"><![CDATA[<p>你应该知道 bind/apply/call 的区别哈，那你能手写一个 bind 么？ 我：wtf。。。。</p><span id="more"></span><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><ul><li>bind 方法会创建一个新的函数，在 bind() 被调用时，这个新函数的 <strong>this</strong> 被指定为 bind() 的第一个参数，而<strong>其余参数</strong>（是的， bind 是有多个参数，只是我们平时只用一个）将作为新函数的<strong>预置</strong>参数，供调用时使用。</li></ul><h3 id="原版使用"><a href="#原版使用" class="headerlink" title="原版使用"></a>原版使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 浏览器环境</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> _fn = fn.bind(obj, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>_fn(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>); <span class="hljs-comment">//  3   [[4,5],6,7]</span><br>fn(); <span class="hljs-comment">// 2  undefined</span><br></code></pre></td></tr></table></figure><h3 id="手写一个-bind"><a href="#手写一个-bind" class="headerlink" title="手写一个 bind"></a>手写一个 bind</h3><figure class="highlight javascript"><figcaption><span>index.js</span><a href="/code/bind/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Function</span>.prototype.myBind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>{<br>  <span class="hljs-keyword">let</span> fn = <span class="hljs-built_in">this</span>; <span class="hljs-comment">// 保存 this 即当前调用的 fn</span><br><br>  <span class="hljs-comment">// arguments 是一个独立的对象， 虽然长得像数组但他不是数组。 这里提供2种方式</span><br>  <span class="hljs-comment">// 1.通过 call 取值</span><br>  <span class="hljs-comment">// let args = Array.prototype.slice.call(arguments, 1); // 提取参数</span><br>  <span class="hljs-comment">// 2.转为数组</span><br>  <span class="hljs-keyword">let</span> params = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>).slice(<span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 当然也可以在定义函数时 使用  function (context,...args) {}</span><br>  <span class="hljs-comment">// args = args ?? [];</span><br><br>  <span class="hljs-comment">// 这里建议不写死参数 。因为无法判断 目标函数到底有多少参数</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-comment">// if (this instanceof newFn) {</span><br>    <span class="hljs-comment">//   return new fn(...arguments, ...params);</span><br>    <span class="hljs-comment">// }</span><br>    <span class="hljs-keyword">return</span> fn.apply(context, [...params, ...arguments]);<br>  };<br>};<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>  <span class="hljs-built_in">console</span>.log(...arguments);<br>}<br><br><span class="hljs-keyword">let</span> obj = {<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>};<br><br><span class="hljs-keyword">const</span> _fn = fn.myBind(obj, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>_fn(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>); <span class="hljs-comment">//  3   [ 4, 5 ] 6 7 8 9</span><br><br><span class="hljs-keyword">let</span> fn2 = {<br>  <span class="hljs-attr">fn</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.a);<br>    <span class="hljs-built_in">console</span>.log(...arguments);<br>  },<br>};<br><br><span class="hljs-keyword">const</span> _fn2 = fn2.fn.bind(obj, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>_fn2(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>); <span class="hljs-comment">//  //  3   [ 4, 5 ] 6 7 8 9</span><br></code></pre></td></tr></table></figure><h3 id="那-call-apply-呢？"><a href="#那-call-apply-呢？" class="headerlink" title="那 call / apply 呢？"></a>那 call / apply 呢？</h3><figure class="highlight javascript"><figcaption><span>call_apply.js</span><a href="/code/bind/call_apply.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注意是2个参数。 不能用  ...args</span><br><span class="hljs-built_in">Function</span>.prototype.myApply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context, args</span>) </span>{<br>  <span class="hljs-keyword">let</span> fn = <span class="hljs-built_in">this</span>;<br>  context[<span class="hljs-string">&#x27;fn&#x27;</span>] = fn;<br>  args = args ?? [];<br>  <span class="hljs-keyword">const</span> res = context.fn(...args);<br>  <span class="hljs-keyword">return</span> res;<br>};<br><br><span class="hljs-comment">// 一摸一样 就改了下参数</span><br><span class="hljs-built_in">Function</span>.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) </span>{<br>  <span class="hljs-keyword">let</span> fn = <span class="hljs-built_in">this</span>;<br>  context[<span class="hljs-string">&#x27;fn&#x27;</span>] = fn;<br>  args = args ?? [];<br>  <span class="hljs-keyword">const</span> res = context.fn(...args);<br>  <span class="hljs-keyword">return</span> res;<br>};<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> { <span class="hljs-attr">a</span>: <span class="hljs-built_in">this</span>.a, <span class="hljs-attr">args</span>: <span class="hljs-built_in">arguments</span> };<br>}<br><br><span class="hljs-keyword">let</span> obj = {<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>,<br>};<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;my apply:&#x27;</span>, fn.myApply(obj, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;origin apply:&#x27;</span>, fn.apply(obj, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]));<br><br><span class="hljs-comment">// ---</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;my call:&#x27;</span>, fn.myCall(obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;origin call:&#x27;</span>, fn.call(obj, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入promise</title>
    <link href="/2021/08/02/%E6%B7%B1%E5%85%A5promise/"/>
    <url>/2021/08/02/%E6%B7%B1%E5%85%A5promise/</url>
    
    <content type="html"><![CDATA[<p>面试官：你如何理解 promise，能手写一个么？ 答：。。。。</p><span id="more"></span><p>要了解 promise 的细节需要看 promise A+ 规范。<a href="https://promisesaplus.com/">链接名称</a> 英文太多了，不看了直接上手写源码</p><h2 id="原生-Promise-的使用"><a href="#原生-Promise-的使用" class="headerlink" title="原生 Promise 的使用"></a>原生 Promise 的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  resolve(<span class="hljs-string">&#x27;resolve&#x27;</span>);<br>  reject(<span class="hljs-string">&#x27;reject&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// then 是有2个参数的。 但平时我们一般只用1个 这里需要注意下</span><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;,<br>);<br><br>p.catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(err);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="开始尝试手写-Promise"><a href="#开始尝试手写-Promise" class="headerlink" title="开始尝试手写 Promise"></a>开始尝试手写 Promise</h2><h3 id="1-搭建代码框架"><a href="#1-搭建代码框架" class="headerlink" title="1.搭建代码框架"></a>1.搭建代码框架</h3><p>第一步创建搭建代码框架</p><ul><li>这里需要在构造函数传入一个执行器 ，并立即执行</li><li>then 方法需要传入 2 个参数,用于执行返回结果 onFulfilled, onRejected</li><li>创建 resolve, reject 方法用于触发状态扭转</li></ul><figure class="highlight javascript"><figcaption><span>promise1.js</span><a href="/code/promise/promise1.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>      onFulfilled(<span class="hljs-built_in">this</span>.value);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>      onRejected(<span class="hljs-built_in">this</span>.reason);<br>    }<br>  };<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test1.js</span><a href="/code/promise/test1.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise1&#x27;</span>);<br><br><span class="hljs-comment">// 测试1</span><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-string">&#x27;do resolve&#x27;</span>);<br>  reject(<span class="hljs-string">&#x27;do reject&#x27;</span>);<br>});<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(res);<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-comment">// 结果 do resolve</span><br></code></pre></td></tr></table></figure><h3 id="2-加入异步"><a href="#2-加入异步" class="headerlink" title="2.加入异步"></a>2.加入异步</h3><p>第一步处理同步任务没问题但是处理异步任务就 gg</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 测试异步</span><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise1(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;do resolve&#x27;</span>);<br>  &#125;, <span class="hljs-number">10</span>);<br>&#125;);<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>  &#125;,<br>);<br><span class="hljs-comment">//  结果 ： 空</span><br></code></pre></td></tr></table></figure><ul><li>因为状态扭转在异步中执行的,then 无法探查到, 我们加入一个回调队列,用于将回调方法存起来, 等状态扭转后再执行</li></ul><figure class="highlight javascript"><figcaption><span>promise2.js</span><a href="/code/promise/promise2.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>当状态改变后,执行回调队列的方法</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>当状态改变后,执行回调队列的方法</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>      onFulfilled(<span class="hljs-built_in">this</span>.value);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>      onRejected(<span class="hljs-built_in">this</span>.reason);<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来 等到执行成功失败函数的时候再传递</span><br>      <span class="hljs-built_in">this</span>.onFulfilledCallback.push(onFulfilled);<br>      <span class="hljs-built_in">this</span>.onRejectedCallback.push(onRejected);<br>    }<br>    <span class="hljs-comment">// 加入异步</span><br>  };<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test2.js</span><a href="/code/promise/test2.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 主线程代码立即执行，setTimeout 是异步代码，then 会马上执行，这个时候判断</span><br><span class="hljs-comment">// Promise 状态，状态是 Pending，然而之前并没有判断等待这个状态</span><br><br><span class="hljs-keyword">const</span> MyPromise2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise2&#x27;</span>);<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> MyPromise2(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">&#x27;do resolve&#x27;</span>);<br>  }, <span class="hljs-number">10</span>);<br>});<br><br>p.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(res);<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-comment">// 结果 do resolve</span><br><br><span class="hljs-comment">// 测试多次调用</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise2(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>    resolve(<span class="hljs-string">&#x27;success&#x27;</span>);<br>  }, <span class="hljs-number">2000</span>);<br>});<br><br>promise.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>});<br><br>promise.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>});<br><br>promise.then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>});<br><br><span class="hljs-comment">// 结果</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// resolve success</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// resolve success</span><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// resolve success</span><br></code></pre></td></tr></table></figure><h3 id="3-实现链式调用"><a href="#3-实现链式调用" class="headerlink" title="3.实现链式调用"></a>3.实现链式调用</h3><ul><li>then 需要支持链式调用, 那么他就需要返回一个 <strong>新的 promise</strong> 对象, 而不能是 this<ul><li>因为如果返回了 this 那么两个 promise 的状态相同, 内部状态是不能改变的,</li><li>而且每次使用 promise 的参数值是取决于上一次 then 的返回值,所以不能使用 this</li></ul></li><li>新返回的 promise 由于需要在 init 之后使用 , 否则语法报错 , 所以需要加入一个微任务 queueMicrotask(()=&gt;{ //处理新创建的 promise })</li><li>由于 then 的 return 需要作为下一次 then 的参数, 所以需要进行判断<ul><li>如果 return 的是一个新的 promise 那么就需要判断他的状态</li><li>如果是普通 value 那么直接 resolve 掉</li></ul></li><li>如果 then 返回的是自己则报错</li></ul><figure class="highlight javascript"><figcaption><span>promise3.js</span><a href="/code/promise/promise3.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span><br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>创建微任务 等待 promise 初始化完成</span><br>        <span class="hljs-comment">// 否则语法报错 不能在 init 之前使用promise</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// 链式调用这里的 res 就可能是:一个新的 promise 对象 || 普通返回值</span><br>          <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>          <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>对返回值进行处理</span><br>          resolvePromise(promise, res, resolve, reject);<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>创建微任务 等待 promise 初始化完成</span><br>        <span class="hljs-comment">// 否则语法报错 不能在 init 之前使用promise</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// 链式调用这里的 res 就可能是:一个新的 promise 对象 || 普通返回值</span><br>          <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.value);<br>          <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>对返回值进行处理</span><br>          resolvePromise(promise, res, resolve, reject);<br>        });<br>        onRejected(<span class="hljs-built_in">this</span>.reason);<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.push(onFulfilled);<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.push(onRejected);<br>      }<br>    });<br><br>    <span class="hljs-keyword">return</span> promise;<br>  };<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">self, x, resolve, reject</span>) </span>{<br>  <span class="hljs-comment">// ADD：</span><br>  <span class="hljs-keyword">if</span> (x === self) {<br>    <span class="hljs-keyword">return</span> reject(<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;MyPromise Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>),<br>    );<br>  }<br><br>  <span class="hljs-comment">// 判断x是不是 MyPromise 实例对象</span><br>  <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> MyPromise) {<br>    <span class="hljs-comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span><br>    <span class="hljs-comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br>    <span class="hljs-comment">// 简化之后</span><br>    x.then(resolve, reject);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-comment">// 普通值</span><br>    resolve(x);<br>  }<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test3.js</span><a href="/code/promise/test3.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise3&#x27;</span>);<br><br><span class="hljs-comment">// 实现 链式调用</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * then 方法要链式调用那么就需要返回一个 Promise 对象</span><br><span class="hljs-comment"> * then 方法里面 return 一个返回值作为下一个 then 方法的参数，</span><br><span class="hljs-comment"> * 如果是 return 一个 Promise 对象，那么就需要判断它的状态</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// 目前这里只处理同步的问题</span><br>  resolve(<span class="hljs-string">&#x27;success&#x27;</span>);<br>});<br><br>promise1<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {<br>      resolve(<span class="hljs-string">&#x27;do inner promise &#x27;</span>);<br>    });<br>  })<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;resolve&#x27;</span>, value);<br>  });<br><br><span class="hljs-comment">// 结果</span><br><span class="hljs-comment">// resolve success</span><br><span class="hljs-comment">// resolve do inner promise</span><br><br><span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> 如果 then 返回自己的 promise 的话 就会发生循环调用 ,</span><br><span class="hljs-comment">// 使用原生 promise 会报 TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-number">100</span>);<br>});<br><span class="hljs-keyword">const</span> p1 = promise2.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">return</span> p1;<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 这里不会执行</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br>p1.then(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {},<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 这里会执行</span><br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><span class="hljs-comment">//  结果： TypeError: MyPromise Chaining cycle detected for promise #&lt;Promise&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-实现捕获异常，并变更状态"><a href="#4-实现捕获异常，并变更状态" class="headerlink" title="4.实现捕获异常，并变更状态"></a>4.实现捕获异常，并变更状态</h3><figure class="highlight javascript"><figcaption><span>promise4.js</span><a href="/code/promise/promise4.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// TODO：捕获异常</span><br>    <span class="hljs-keyword">try</span> {<br>      executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>    } <span class="hljs-keyword">catch</span> (error) {<br>      <span class="hljs-built_in">this</span>.reject(error);<br>    }<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br><br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span><br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// TODO：捕获异常</span><br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>        <span class="hljs-comment">// TODO：捕获异常</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.reason);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.push(onFulfilled);<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.push(onRejected);<br>      }<br>    });<br><br>    <span class="hljs-keyword">return</span> promise;<br>  };<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">self, x, resolve, reject</span>) </span>{<br>  <span class="hljs-keyword">if</span> (x === self) {<br>    <span class="hljs-keyword">return</span> reject(<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;MyPromise Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>),<br>    );<br>  }<br><br>  <span class="hljs-comment">// 判断x是不是 MyPromise 实例对象</span><br>  <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> MyPromise) {<br>    <span class="hljs-comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span><br>    <span class="hljs-comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br>    <span class="hljs-comment">// 简化之后</span><br>    x.then(resolve, reject);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-comment">// 普通值</span><br>    resolve(x);<br>  }<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test4.js</span><a href="/code/promise/test4.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise4&#x27;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 捕获执行器中的代码，如果执行器中有代码错误，那么 Promise 的状态要变为失败</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// resolve(100);</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;执行错误&#x27;</span>);<br>});<br><span class="hljs-keyword">const</span> p1 = promise.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">return</span> p1;<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-number">100</span>);<br>  <span class="hljs-comment">// throw new Error(&#x27;执行错误&#x27;);</span><br>});<br>promise2<br>  .then(<br>    <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;then 执行错误&#x27;</span>);<br>    },<br>    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">console</span>.log(err);<br>    },<br>  )<br>  .then(<br>    <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>    },<br>    <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>      <span class="hljs-built_in">console</span>.log(err);<br>    },<br>  );<br></code></pre></td></tr></table></figure><h3 id="5-then-为可选参数-修改-pending-状态代码-增加-resolve-reject-静态方法"><a href="#5-then-为可选参数-修改-pending-状态代码-增加-resolve-reject-静态方法" class="headerlink" title="5.then 为可选参数 修改 pending 状态代码 增加 resolve/reject 静态方法"></a>5.then 为可选参数 修改 pending 状态代码 增加 resolve/reject 静态方法</h3><ul><li>静态的 resolve/reject 需要返回 promise</li></ul><figure class="highlight javascript"><figcaption><span>promise5.js</span><a href="/code/promise/promise5.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先定义三个常量表示状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span></span><br><span class="hljs-comment">// 增加异步状态下的链式调用</span><br><span class="hljs-comment">// 增加回调函数执行结果的判断</span><br><span class="hljs-comment">// 增加识别 Promise 是否返回自己</span><br><span class="hljs-comment">// 增加错误捕获</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPromise</span> </span>{<br>  <span class="hljs-comment">// 状态</span><br>  status = PENDING;<br>  <span class="hljs-comment">// 返回的值</span><br>  value = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 失败后返回的值</span><br>  reason = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 缓存成功回调</span><br>  onFulfilledCallback = [];<br>  <span class="hljs-comment">// 缓存失败回调</span><br>  onRejectedCallback = [];<br><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 增加静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">resolve</span>(<span class="hljs-params">param</span>)</span> {<br>    <span class="hljs-keyword">if</span> (param <span class="hljs-keyword">instanceof</span> MyPromise) {<br>      <span class="hljs-keyword">return</span> param;<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {<br>      resolve(param);<br>    });<br>  }<br><br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 增加静态方法</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">reject</span>(<span class="hljs-params">reason</span>)</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      reject(reason);<br>    });<br>  }<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> {<br>    <span class="hljs-comment">// 执行器  new 的时候立即执行</span><br>    <span class="hljs-keyword">try</span> {<br>      executor(<span class="hljs-built_in">this</span>.resolve, <span class="hljs-built_in">this</span>.reject);<br>    } <span class="hljs-keyword">catch</span> (error) {<br>      <span class="hljs-built_in">this</span>.reject(error);<br>    }<br>  }<br><br>  resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = FULFILLED;<br>      <span class="hljs-built_in">this</span>.value = value;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onFulfilledCallback.length) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.shift()(<span class="hljs-built_in">this</span>.value);<br>      }<br>    }<br>  };<br>  reject = <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>      <span class="hljs-built_in">this</span>.status = REJECTED;<br>      <span class="hljs-built_in">this</span>.reason = err;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.onRejectedCallback.length) {<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.shift()(<span class="hljs-built_in">this</span>.reason);<br>      }<br>    }<br>  };<br>  then = <span class="hljs-function">(<span class="hljs-params">onFulfilled, onRejected</span>) =&gt;</span> {<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上面我们处理 then 方法的时候都是默认传入 onFulfilled、onRejected 两个回调函数，</span><br><span class="hljs-comment">     * 但是实际上原生 Promise 是可以选择参数的单传或者不传，都不会影响执行。</span><br><span class="hljs-comment">     */</span><br>    onFulfilled =<br>      <span class="hljs-keyword">typeof</span> onFulfilled === <span class="hljs-string">&#x27;function&#x27;</span> ? onFulfilled : <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br>    onRejected =<br>      <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span> ? onRejected : <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br><br>    <span class="hljs-comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span><br>    <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === FULFILLED) {<br>        <span class="hljs-comment">// 如果是链式调用这里的 res 就是一个新的 promise 对象</span><br><br>        <span class="hljs-comment">// const res = onFulfilled(this.value);</span><br>        <span class="hljs-comment">// ADD:创建微任务 等待 promise 初始化完成</span><br>        <span class="hljs-comment">// 否则语法报错 不能在 init 之前使用promise</span><br><br>        <span class="hljs-comment">// resolvePromise(promise, res, resolve, reject);</span><br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-comment">// ADD:</span><br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === REJECTED) {<br>        queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>          <span class="hljs-keyword">try</span> {<br>            <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.reason);<br>            resolvePromise(promise, res, resolve, reject);<br>          } <span class="hljs-keyword">catch</span> (error) {<br>            reject(error);<br>          }<br>        });<br>      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.status === PENDING) {<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback.push(<span class="hljs-function">() =&gt;</span> {<br>          queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>            <span class="hljs-keyword">try</span> {<br>              <span class="hljs-keyword">const</span> res = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>              resolvePromise(promise, res, resolve, reject);<br>            } <span class="hljs-keyword">catch</span> (error) {<br>              reject(error);<br>            }<br>          });<br>        });<br>        <span class="hljs-built_in">this</span>.onRejectedCallback.push(<span class="hljs-function">() =&gt;</span> {<br>          queueMicrotask(<span class="hljs-function">() =&gt;</span> {<br>            <span class="hljs-keyword">try</span> {<br>              <span class="hljs-keyword">const</span> res = onRejected(<span class="hljs-built_in">this</span>.reason);<br>              resolvePromise(promise, res, resolve, reject);<br>            } <span class="hljs-keyword">catch</span> (error) {<br>              reject(error);<br>            }<br>          });<br>        });<br>      }<br>    });<br><br>    <span class="hljs-keyword">return</span> promise;<br>  };<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolvePromise</span>(<span class="hljs-params">self, x, resolve, reject</span>) </span>{<br>  <span class="hljs-keyword">if</span> (x === self) {<br>    <span class="hljs-keyword">return</span> reject(<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;MyPromise Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>),<br>    );<br>  }<br><br>  <span class="hljs-comment">// 判断x是不是 MyPromise 实例对象</span><br>  <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> MyPromise) {<br>    <span class="hljs-comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span><br>    <span class="hljs-comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span><br>    <span class="hljs-comment">// 简化之后</span><br>    x.then(resolve, reject);<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-comment">// 普通值</span><br>    resolve(x);<br>  }<br>}<br><br><span class="hljs-built_in">module</span>.exports = MyPromise;<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><figcaption><span>test5.js</span><a href="/code/promise/test5.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MyPromise = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./promise5&#x27;</span>);<br><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 捕获执行器中的代码，如果执行器中有代码错误，那么 Promise 的状态要变为失败</span><br><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  <span class="hljs-comment">// resolve(100);</span><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;执行错误&#x27;</span>);<br>});<br><span class="hljs-keyword">const</span> p1 = promise.then(<br>  <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(value);<br>    <span class="hljs-keyword">return</span> p1;<br>  },<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">console</span>.log(err);<br>  },<br>);<br><br><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  resolve(<span class="hljs-number">100</span>);<br>  <span class="hljs-comment">// throw new Error(&#x27;执行错误&#x27;);</span><br>});<br><br>promise1<br>  .then()<br>  .then()<br>  .then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(value));<br><br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> MyPromise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {<br>  reject(<span class="hljs-string">&#x27;err&#x27;</span>);<br>});<br><br>promise2<br>  .then()<br>  .then()<br>  .then(<br>    <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(value),<br>    <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> <span class="hljs-built_in">console</span>.log(reason),<br>  );<br><br><span class="hljs-comment">// 实现 resolve 与 reject 的静态调用</span><br>MyPromise.resolve()<br>  .then(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> MyPromise.resolve(<span class="hljs-number">4</span>);<br>  })<br>  .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {<br>    <span class="hljs-built_in">console</span>.log(res);<br>  });<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js的new到底干了什么，如何手写一个new</title>
    <link href="/2021/07/29/js%E7%9A%84new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88,%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2021/07/29/js%E7%9A%84new%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88,%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>let arr = new Array() 到底内部发生了什么? js 中的实例是如何创建出来的？它和 Object.create() 区别是什么？</p><span id="more"></span><h3 id="原型链说起"><a href="#原型链说起" class="headerlink" title="原型链说起"></a>原型链说起</h3><blockquote><p>每个实例对象（object）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的<strong>构造函数的原型对象</strong>（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.b = <span class="hljs-number">2</span>;<br>&#125;;<br>f.prototype.b = <span class="hljs-number">3</span>;<br>f.prototype.c = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> f();<br><br><span class="hljs-built_in">console</span>.log(o.__proto__ === f.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 私有属性 __proto__ 指向了构造函数的原型对象</span><br><br><span class="hljs-built_in">console</span>.log(o.a); <span class="hljs-comment">//  1</span><br><span class="hljs-comment">// a是o的自身属性吗？是的，该属性的值为 1</span><br><br><span class="hljs-built_in">console</span>.log(o.b);<br><span class="hljs-comment">// b是o的自身属性吗？是的，该属性的值为 2</span><br><span class="hljs-comment">// 原型上也有一个&#x27;b&#x27;属性，但是它不会被访问到。</span><br><span class="hljs-comment">// 这种情况被称为&quot;属性遮蔽 (property shadowing)&quot;</span><br><br><span class="hljs-built_in">console</span>.log(o.c); <span class="hljs-comment">// 4</span><br><span class="hljs-comment">// c是o的自身属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4</span><br><br><span class="hljs-built_in">console</span>.log(o.d); <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// d 是 o 的自身属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有</span><br><span class="hljs-comment">// o.[[Prototype]].[[Prototype]] 为 null，停止搜索</span><br><span class="hljs-comment">// 找不到 d 属性，返回 undefined</span><br></code></pre></td></tr></table></figure><h3 id="new-内部发生了什么？原型链如何指向？"><a href="#new-内部发生了什么？原型链如何指向？" class="headerlink" title="new 内部发生了什么？原型链如何指向？"></a>new 内部发生了什么？原型链如何指向？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.b = <span class="hljs-number">2</span>;<br>&#125;;<br>f.prototype.b = <span class="hljs-number">3</span>;<br>f.prototype.c = <span class="hljs-number">4</span>;<br><br><span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> f();<br><span class="hljs-built_in">console</span>.log(o);<br><span class="hljs-comment">// o 为新创建的空对象，它的 __proto__ 指向 f.prototype</span><br><span class="hljs-comment">// o.__proto__  === f.prototype   // true</span><br></code></pre></td></tr></table></figure><h4 id="new-和-Object-create-有什么区别？"><a href="#new-和-Object-create-有什么区别？" class="headerlink" title="new 和 Object.create() 有什么区别？"></a>new 和 Object.create() 有什么区别？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(f);<br>  &#125;;<br>&#125;;<br><br><span class="hljs-keyword">let</span> createFn = <span class="hljs-built_in">Object</span>.create(fn);<br><span class="hljs-comment">// createFn 的原型 指向 传入的 fn 的地址</span><br><span class="hljs-built_in">console</span>.log(createFn.__proto__);<br><span class="hljs-comment">// VM513:1 ƒ () &#123;</span><br><span class="hljs-comment">//     this.a = 1;</span><br><span class="hljs-comment">//     this.f = function () &#123;</span><br><span class="hljs-comment">//         console.log(f);</span><br><span class="hljs-comment">//     &#125;;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-built_in">console</span>.log(createFn.__proto__ === fn); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(createFn.constructor === fn.constructor); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(createFn.constructor === fn.prototype.constructor); <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> newFn = <span class="hljs-keyword">new</span> fn();<br><span class="hljs-built_in">console</span>.log(newFn.__proto__ === fn.prototype); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(newFn.constructor === fn.constructor); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(newFn.constructor === fn.prototype.constructor); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="对比-create-和-new-得知"><a href="#对比-create-和-new-得知" class="headerlink" title="对比 create 和 new 得知"></a>对比 create 和 new 得知</h5><ul><li>create</li><li><ul><li><code>createFn.__proto__</code> === fn</li></ul></li><li><ul><li><code>createFn.constructor</code> === fn.constructor</li></ul></li><li>new</li><li><ul><li><code>newFn.__proto__</code> === fn.prototype</li></ul></li><li><ul><li><code>newFn.constructor</code> === fn.prototype.constructor</li></ul></li></ul><p>也就是 create 的对象他的原型链都是指向 fn 本体的。而 new 的对象 都是指向 fn.prototype</p><h3 id="fn-constructor-和-fn-prototype-constructor-有什么关系"><a href="#fn-constructor-和-fn-prototype-constructor-有什么关系" class="headerlink" title="fn.constructor 和 fn.prototype.constructor 有什么关系"></a>fn.constructor 和 fn.prototype.constructor 有什么关系</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 还是这个栗子</span><br><span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.a = <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">this</span>.f = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(f);<br>  &#125;;<br>&#125;;<br><span class="hljs-built_in">console</span>.log(fn.prototype.constructor === fn); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(fn.constructor === <span class="hljs-built_in">Function</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>由上可知</p><ul><li>一个对象的 fn.constructor 是指向其父类本体的</li><li>一个对象的 fn.prototype.constructor 是指向本体的</li></ul><p>一张图就能明白：<br><img src="/images/%E5%8E%9F%E5%9E%8B%E9%93%BE.png"></p><h3 id="手写一个-new-吧"><a href="#手写一个-new-吧" class="headerlink" title="手写一个 new 吧"></a>手写一个 new 吧</h3><ul><li>new 返回一个新对象</li><li>该对象是执行了 目标类 constructor 之后的结果</li><li>该对象的 <code>__propto__</code> 指向 <strong>目标类的 prototype</strong></li></ul><figure class="highlight javascript"><figcaption><span>index.js</span><a href="/code/new/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myNew = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) </span>{<br>  <span class="hljs-keyword">let</span> obj = {};<br>  obj.__proto__ = context.prototype;<br>  context.apply(obj, args);<br>  <span class="hljs-keyword">return</span> obj;<br>};<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">person</span>(<span class="hljs-params">name, age</span>) </span>{<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>}<br><br><span class="hljs-keyword">let</span> p = myNew(person, <span class="hljs-string">&#x27;布兰&#x27;</span>, <span class="hljs-number">12</span>);<br><span class="hljs-built_in">console</span>.log(p); <span class="hljs-comment">// { name: &#x27;布兰&#x27;, age: 12 }</span><br></code></pre></td></tr></table></figure><h3 id="再手写一个-Object-create-吧"><a href="#再手写一个-Object-create-吧" class="headerlink" title="再手写一个 Object.create 吧"></a>再手写一个 Object.create 吧</h3><ul><li><code>__proto__</code> 指向目标对象即可</li></ul><figure class="highlight javascript"><figcaption><span>create.js</span><a href="/code/new/create.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = {<br>  <span class="hljs-attr">isHuman</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">printIntroduction</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`My name is <span class="hljs-subst">${<span class="hljs-built_in">this</span>.name}</span>. Am I human? <span class="hljs-subst">${<span class="hljs-built_in">this</span>.isHuman}</span>`</span>);<br>  },<br>};<br><br><span class="hljs-built_in">Object</span>.prototype.MyCreate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>{<br>  <span class="hljs-keyword">let</span> obj = {};<br><br>  obj.__proto__ = context;<br>  <span class="hljs-keyword">return</span> obj;<br>};<br><br><span class="hljs-keyword">const</span> me = <span class="hljs-built_in">Object</span>.create(person);<br>me.name = <span class="hljs-string">&#x27;Matthew&#x27;</span>; <span class="hljs-comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br>me.isHuman = <span class="hljs-literal">true</span>; <span class="hljs-comment">// inherited properties can be overwritten</span><br><span class="hljs-built_in">console</span>.log(me);<br>me.printIntroduction();<br><span class="hljs-comment">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span><br><br><span class="hljs-keyword">const</span> me2 = <span class="hljs-built_in">Object</span>.MyCreate(person);<br><br>me2.name = <span class="hljs-string">&#x27;Matthew&#x27;</span>; <span class="hljs-comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br>me2.isHuman = <span class="hljs-literal">true</span>; <span class="hljs-comment">// inherited properties can be overwritten</span><br><span class="hljs-built_in">console</span>.log(me);<br>me2.printIntroduction();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>js原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>手写js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js中的栈都能干什么</title>
    <link href="/2020/03/29/js%E4%B8%AD%E7%9A%84%E6%A0%88%E9%83%BD%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88/"/>
    <url>/2020/03/29/js%E4%B8%AD%E7%9A%84%E6%A0%88%E9%83%BD%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>阅读《数据结构与算法.javascript 描述》做的一点笔记</p><span id="more"></span><h3 id="js-栈的实现"><a href="#js-栈的实现" class="headerlink" title="js 栈的实现"></a>js 栈的实现</h3><figure class="highlight javascript"><figcaption><span>index.js</span><a href="/code/stack/index.js">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Stack</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">this</span>.dataSource = [];<br>    <span class="hljs-built_in">this</span>.top = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.push = push;<br>    <span class="hljs-built_in">this</span>.pop = pop;<br>    <span class="hljs-built_in">this</span>.len = len;<br>    <span class="hljs-built_in">this</span>.peek = peek;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">push</span>(<span class="hljs-params">element</span>) </span>{<br>    <span class="hljs-built_in">this</span>.dataSource[<span class="hljs-built_in">this</span>.top++] = element;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pop</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dataSource[--<span class="hljs-built_in">this</span>.top];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">peek</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.dataSource[<span class="hljs-built_in">this</span>.top - <span class="hljs-number">1</span>];<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clear</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">this</span>.top = <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">len</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.top;<br>}<br><br><span class="hljs-comment">// 进制转换</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convert</span>(<span class="hljs-params">num, base</span>) </span>{<br>    <span class="hljs-keyword">var</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">var</span> res = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">do</span> {<br>        stack.push(num % base);<br>        num = <span class="hljs-built_in">Math</span>.floor(num / base);<br>    } <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (stack.len() &gt; <span class="hljs-number">0</span>) {<br>        res += stack.pop();<br>    }<br>    <span class="hljs-keyword">return</span> res;<br>}<br><span class="hljs-comment">// console.log(convert(10, 2)) // 1010</span><br><br><span class="hljs-comment">// 表达式匹配  如：2+500-(451-100  匹配缺失的括号位置</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params">reg</span>) </span>{<br>    <span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> _reg = reg.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; _reg.length; index++) {<br>        <span class="hljs-keyword">const</span> element = _reg[index];<br>        <span class="hljs-keyword">switch</span> (element) {<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;{&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                stack.push(element);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;}&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;{&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;[&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;(&#x27;</span> === stack.peek()) {<br>                    stack.pop();<br>                } <span class="hljs-keyword">else</span> {<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`第<span class="hljs-subst">${index}</span>位缺少<span class="hljs-subst">${stack.peek()}</span>的结束符`</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                }<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        }<br>    }<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;无错误&#x27;</span>);<br>}<br><span class="hljs-comment">// let reg = &quot;1+2*[(5-1+]5)&quot;</span><br><span class="hljs-comment">// format(reg)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  一个算数表达式的后缀如下：</span><br><span class="hljs-comment"> *  op1 op2 operator</span><br><span class="hljs-comment"> *  设计一个函数将中缀表达式转换为后缀表达式，然后利用栈对该表达式求值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getOpPriority</span>(<span class="hljs-params">op</span>) </span>{<br>    <span class="hljs-keyword">switch</span> (op) {<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params">reg</span>) </span>{<br>    <span class="hljs-keyword">let</span> numStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> opStack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">let</span> _reg = reg.split(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">let</span> regChange = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; _reg.length; index++) {<br>        <span class="hljs-keyword">let</span> element = _reg[index].trim();<br>        <span class="hljs-keyword">if</span> (element &amp;&amp; !<span class="hljs-built_in">isNaN</span>(element)) {<br>            <span class="hljs-comment">// 如果是数字 进入数字栈</span><br>            numStack.push(element);<br>            regChange += element;<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">// 如果是符号 则进入符号栈</span><br>            regChange += element;<br>            <span class="hljs-keyword">if</span> (getOpPriority(element)) {<br>            }<br>            opStack.push(element);<br>        }<br>    }<br>    <span class="hljs-built_in">console</span>.log(regChange);<br>}<br><span class="hljs-keyword">let</span> reg = <span class="hljs-string">&#x27;1+(2-3)+5*7&#x27;</span>;<br><span class="hljs-comment">/**  57*123-++</span><br><span class="hljs-comment"> * 5    /</span><br><span class="hljs-comment"> * 4    *</span><br><span class="hljs-comment"> * 3    )</span><br><span class="hljs-comment"> * 2    -</span><br><span class="hljs-comment"> * 1    )</span><br><span class="hljs-comment"> *      +</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// change(reg);</span><br><br><span class="hljs-comment">// 一盒糖果，里面有红(1)黄(2)白(3)三种糖果， 在不改变其他糖果叠放顺序的情况下，将黄色糖果移除</span><br><span class="hljs-keyword">let</span> suger = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeSuger</span>(<span class="hljs-params">list</span>) </span>{<br>    <span class="hljs-keyword">let</span> stack = <span class="hljs-keyword">new</span> Stack();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = list.length - <span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--) {<br>        <span class="hljs-keyword">const</span> element = list[index];<br>        <span class="hljs-keyword">if</span> (element !== <span class="hljs-number">2</span>) {<br>            stack.push(element);<br>        }<br>    }<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">do</span> {<br>        arr.push(stack.pop());<br>    } <span class="hljs-keyword">while</span> (stack.len() &gt; <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> arr;<br>}<br><span class="hljs-keyword">let</span> res = removeSuger(suger);<br><span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>babel入门</title>
    <link href="/2020/01/03/babel%E5%85%A5%E9%97%A8/"/>
    <url>/2020/01/03/babel%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的 <a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">《Babel 入门教程》</a>的教程所做的一些个人总结和思考</p><span id="more"></span><p>babel已经成为前端开发的基础依赖。so 借助阮大神的教程学习一下。目前babel已经更新到7.0并改包名为@babel。</p><h4 id="babel功能"><a href="#babel功能" class="headerlink" title="babel功能"></a>babel功能</h4><p>平时我们用ES5+编写代码，但是浏览器和node环境还不完全支持最新的语法（如最常见的箭头函数）。那么babel作为一个编译器的角色将我们的代码再次转换为环境所能识别的代码。</p><h4 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h4><p>babelrc 是babel的配置文件，babel如何转换代码，包括支持哪些语法全由这个配置文件决定！</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [],  &lt;===== 配置你的转码规则集合<br>  <span class="hljs-string">&quot;plugins&quot;</span>: []   &lt;===== 根据插件配置你的转码规则<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="babel-config-js和-babelrc的区别"><a href="#babel-config-js和-babelrc的区别" class="headerlink" title="babel.config.js和.babelrc的区别"></a>babel.config.js和.babelrc的区别</h5><p>babel.config.js 以编程的方式进行配置且会将node_modules的包也一同转换；<br>.babelrc 仅转换你的工程文件</p><p> 官方解释：</p><ul><li>You want to programmatically create the configuration?</li><li>You want to compile node_modules?</li></ul><blockquote><p>babel.config.js is for you! </p></blockquote><ul><li>You have a static configuration that only applies to your simple single package?</li></ul><blockquote><p>.babelrc is for you!</p></blockquote><h5 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h5><blockquote><p>官方解释：Babel is a compiler (source code =&gt; output code). Like many other compilers it runs in 3 stages: parsing, transforming, and printing.</p></blockquote><p>babel的插件一般会拆分成很小的粒度，可以按需引入</p><p>pulugins 是一个插件数组，你只需要按需配置你的插件用来制定你的代码该 如何解析，如何转换，如何输出你的代码。（当然大部分时候只需要无脑使用就行了，不需要太多配置）<br>如果有多个配置项，<strong>按顺序解析！！</strong></p><h5 id="preset"><a href="#preset" class="headerlink" title="preset"></a>preset</h5><p>由于 plugin 可以按需配置，但是过多的配置又让人心力憔悴，所以就有了preset<br>这个可以看作是一堆插件的集合。<br>如果有多个preset 为了向后兼容采用的 <strong>倒叙解析</strong></p><h5 id="presets与plugins-的顺序问题"><a href="#presets与plugins-的顺序问题" class="headerlink" title="presets与plugins 的顺序问题"></a>presets与plugins 的顺序问题</h5><p>再配置文件中的presets和plugins 会先执行 plugins的配置，再执行presets </p><pre><code>&#123;  &quot;plugins&quot;: [                    //按顺序先执行 plugins    &quot;transform-react-jsx&quot;,    &quot;transform-async-to-generator&quot;  ],  &quot;presets&quot;: [                    // 按倒叙再plugins执行完后执行    &quot;es2015&quot;,    &quot;es2016&quot;      ]&#125;</code></pre><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>babel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>babel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组解构赋值</title>
    <link href="/2019/12/31/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <url>/2019/12/31/%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的《ECMAScript 6 入门》的教程所做的一些个人总结和思考</p><span id="more"></span><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p><h4 id="示例摘要"><a href="#示例摘要" class="headerlink" title="示例摘要"></a>示例摘要</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">let [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <br><br>let [head, ...tail] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>head <span class="hljs-regexp">//</span> <span class="hljs-number">1</span><br>tail <span class="hljs-regexp">//</span> [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>let [x, y, ...z] = [<span class="hljs-string">&#x27;a&#x27;</span>];<br>x <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;a&quot;</span><br>y <span class="hljs-regexp">//</span> undefined<br>z <span class="hljs-regexp">//</span> []   <span class="hljs-regexp">//</span>空数组<br></code></pre></td></tr></table></figure><p> set解构也可以用数组遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [a,b,c] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><blockquote><p>只要数据具有Iterator接口，均可以被解构</p></blockquote><h5 id="可使用默认值"><a href="#可使用默认值" class="headerlink" title="可使用默认值"></a>可使用默认值</h5><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-keyword">let</span> [<span class="hljs-attr">a=123]=[undefined]</span><br>/// <span class="hljs-attr">a</span> = <span class="hljs-number">123</span><br><br><span class="hljs-keyword">let</span> [<span class="hljs-attr">x</span> =<span class="hljs-number">1</span> ]= [ undefined ]<br>// <span class="hljs-attr">x</span> = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">let</span> [ <span class="hljs-attr">x</span> = <span class="hljs-number">2</span>] = [<span class="hljs-literal">null</span>]<br>//<span class="hljs-attr">x</span> = <span class="hljs-literal">null</span> <br></code></pre></td></tr></table></figure><p>由于ES6中使用严格相等运算符(====)，所以只有元素严格等于undefined时才生效</p><ul><li> 惰性求值</li></ul><p>解构中如果默认的值是一个表达式，则在使用时才会执行。</p><ul><li> 对象解构</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">let &#123; foo: baz &#125; = &#123; foo: <span class="hljs-string">&#x27;aaa&#x27;</span>, bar: <span class="hljs-string">&#x27;bbb&#x27;</span> &#125;;<br>baz <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;aaa&quot;</span><br><br>let obj = &#123; first: <span class="hljs-string">&#x27;hello&#x27;</span>, last: <span class="hljs-string">&#x27;world&#x27;</span> &#125;;<br>let &#123; first: f, last: l &#125; = obj;   <span class="hljs-regexp">//</span> 指定解构为新变量<br>f <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;hello&#x27;</span><br>l <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;world&#x27;</span><br></code></pre></td></tr></table></figure><p>上例对象解构中 foo为解构模式，baz为被赋值变量，即key为解构模式，value为目标变量。</p><p>这里可以使用ES6的新特性，简写为下面的情况，</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> &#123; <span class="hljs-built_in">log</span> &#125; = console<span class="hljs-comment">;     </span><br>// 完整写法 <span class="hljs-keyword">const</span> &#123; <span class="hljs-built_in">log</span>:<span class="hljs-built_in">log</span>&#125;=console<br><span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) // hello<br></code></pre></td></tr></table></figure><ul><li>注意：解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">prop</span>: x &#125; = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// TypeError</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">prop</span>: y &#125; = <span class="hljs-literal">null</span>; <span class="hljs-comment">// TypeError</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>解构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>let/const命令</title>
    <link href="/2019/12/30/let-const%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/12/30/let-const%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>根据阮一峰的《ECMAScript 6 入门》的教程所做的一些个人总结和思考</p><span id="more"></span><h3 id="let-const"><a href="#let-const" class="headerlink" title="let/const"></a>let/const</h3><h4 id="死区"><a href="#死区" class="headerlink" title="死区"></a>死区</h4><p>采用块级作用域，不存在<strong>变量提升</strong>，会产生暂时性<strong>死区</strong>。 ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  tmp = <span class="hljs-string">&#x27;abc&#x27;</span>; <span class="hljs-comment">// ReferenceError</span><br>  <span class="hljs-keyword">let</span> tmp; <span class="hljs-comment">// 在当前块作用域 tmp属于声明之前就使用 so 报错</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数声明不会提升"><a href="#函数声明不会提升" class="headerlink" title="函数声明不会提升"></a>函数声明不会提升</h4><p>由于为了兼容老代码，在支持 ES6 的浏览器中会有所修改</p><ul><li>  允许在块级作用域内声明函数。</li><li>  函数声明类似于 var，即会提升到全局作用域或函数作用域的头部。</li><li>  同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><h4 id="const-本质"><a href="#const-本质" class="headerlink" title="const 本质"></a>const 本质</h4><blockquote><p>const 实际上保证的，并不是变量的值不得改动，而是变量<strong>指向的内存地址</strong>所保存的数据不得改动。</p></blockquote><ul><li>  对于简单类型的数据（数值、字符串、布尔值）: 值就保存在变量指向的那个内存地址，因此等同于常量。</li><li>  但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>let</tag>
      
      <tag>const</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于webpack抽离配置文件的思考</title>
    <link href="/2019/12/23/%E5%85%B3%E4%BA%8Ewebpack%E6%8A%BD%E7%A6%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2019/12/23/%E5%85%B3%E4%BA%8Ewebpack%E6%8A%BD%E7%A6%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>大部分项目开发使用的环境和生产环境有较大差异，且前后端通过 API 进行通信，部署生产项目时必须大量修改配置重新打包。有时候可能仅仅是配置文件的微小改变却需要重新打包部署发布，对于我们本就心力憔悴的程序员来说又是一种折磨。so 我们需要一种更加便利的配置加载方式！</p><h2 id=""><a href="#" class="headerlink" title=""></a><span id="more"></span></h2><blockquote><p>目标：分离出 prod 配置文件，同时保留 dev 的配置。根据 webpack 得 mode 字段判断当前环境。打包后在不同的环境自动使用不同的配置文件，同时在生产环境可以根据需求动态修改，无需重新打包部署</p></blockquote><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>在大量浏览网上的解决方案后，发现大致方法分为 3 种。</p><blockquote><ol><li>建立 globalConfig.json 文件用来存放配置，打包的时候分离出这个 json。在项目初始化的时候再异步加载该文件。</li></ol></blockquote><ul><li>  思考：个人认为是一种很不错的思路，但是如果个别项目前期初始化需要做大量的逻辑判断或多个异步操作，这个时候异步就显得有些难以控制了，必须用 async/await 将异步改为同步，需要前期做好规划。</li></ul><blockquote><ol start="2"><li>网上还有一种方式是通过 webpack 的 <a href="https://www.npmjs.com/package/generate-asset-webpack-plugin">generate-asset-webpack-plugin</a> 插件，在打包的时候读取一份 json 然后再重新生成一份配置文件。</li></ol></blockquote><ul><li>  思考：这种打包方式更能把 webpack 的能力发挥到极致，本想仔细研究的，但是由于小弟实在是没有找到这个插件的详细文档，且常年没有更新，貌似已经被抛弃了，因此有太多不确定性 so 放弃了种方式</li></ul><blockquote><ol start="3"><li>利用浏览器的 window 全局对象。先项目中建立一个 globalConfig.js，在打包时在 html 里先加载这个文件，将配置文件注入到 window 全局对象中。然后执行后面的初始化逻辑。</li></ol></blockquote><ul><li>  思考：目前来讲个人认为这是一个简单且可靠的方式。虽然大家都知道占用全局变量是一个不好的习惯，但毕竟是 API 配置文件其重要性不言而喻，so 占用一个全局变量也无伤大雅吧~</li></ul><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><blockquote><p>环境：使用 vue3，webpack4 未使用 vue-cli</p></blockquote><ul><li>  手写一个最基础的 webpack 配置，这里只设置了开发 dev 和生产环境 prod 两种配置，vue 能跑通就行~~ 重点是在打包时根据 process.env. NODE_ENV 判断应该使用 dev 还是 prod 的配置文件。在 build 生产环境时利用 copy-webpack-plugin 插件将 prodGlobalConfig.js 复制到 dist 下，然后再 html(需要使用简单的 ejs 语法)中加载即可</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── build<br>│   ├── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.base</span><span class="hljs-selector-class">.js</span><br>│   ├── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.dev</span><span class="hljs-selector-class">.js</span><br>│   └── webpack<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.prod</span><span class="hljs-selector-class">.js</span><br>├── package-lock<span class="hljs-selector-class">.json</span><br>├── package<span class="hljs-selector-class">.json</span><br>├── public<br>│   ├── devGlobalConfig<span class="hljs-selector-class">.js</span>  &lt;===你的开发环境config<br>│   ├── index<span class="hljs-selector-class">.html</span><br>│   └── prodGlobalConfig<span class="hljs-selector-class">.js</span> &lt;===正式环境config<br>└── <span class="hljs-attribute">src</span><br>    ├── App<span class="hljs-selector-class">.vue</span><br>    ├── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span><br>    ├── store<br>    │   ├── config<span class="hljs-selector-class">.js</span><br>    │   └── index<span class="hljs-selector-class">.js</span><br>    └── utils<br>        └── getConfig<span class="hljs-selector-class">.js</span>   &lt;===定义根据环境获取配置的工具函数<br></code></pre></td></tr></table></figure><p>webpack.config.prod.js: 使用 CopyWebpackPlugin 将配置文件复制到打包目录</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./webpack.config.base.js&quot;</span>);<br><span class="hljs-keyword">const</span> marge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack-merge&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> CopyWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;copy-webpack-plugin&quot;</span>);<br><br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = marge(common, &#123;<br>    mode: <span class="hljs-string">&quot;production&quot;</span>,<br>    output: &#123;<br>        filename: <span class="hljs-string">&quot;[name].[chunkhash].bundle.js&quot;</span><br>    &#125;,<br>    plugins: [<br>        <span class="hljs-keyword">new</span> CleanWebpackPlugin(),<br>        <span class="hljs-keyword">new</span> CopyWebpackPlugin([     &lt;== 将生产环境配置文件拷贝到最终的打包目录下<br>            &#123;<br>                context: path.resolve(__dirname,<span class="hljs-string">&#x27;..&#x27;</span>),<br>                from: <span class="hljs-string">&quot;./public/prodGlobalConfig.js&quot;</span>,<br>                to: <span class="hljs-string">&quot;.&quot;</span><br>            &#125;<br>        ])<br>    ]<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>prodGlobalConfig.js：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// 生产环境配置项</span><br><span class="hljs-keyword">window</span>.globalConfig = &#123;<br>    <span class="hljs-keyword">text</span>: <span class="hljs-string">&quot;prod&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>devGlobalConfig.js：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"> <span class="hljs-comment">// 开发环境</span><br><span class="hljs-keyword">const</span> devConfig = &#123;<br>    text: <span class="hljs-string">&quot;dev&quot;</span><br>&#125;;<br><span class="hljs-keyword">export</span> &#123; devConfig &#125;;<br></code></pre></td></tr></table></figure><p>getConfig.js：根据 process.env. NODE_ENV 判断当前所处的环境，返回不同的配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; devConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../public/devGlobalConfig&quot;</span>;<br><br><span class="hljs-keyword">const</span> getConfig = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.globalConfig;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> devConfig;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; getConfig &#125;;<br></code></pre></td></tr></table></figure><p>main.js： 简单处理。直接将配置文件写入根对象</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; getConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/getConfig&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br>Vue.prototype.globalConfig = getConfig();<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    el: <span class="hljs-string">&quot;<span class="hljs-subst">#app</span>&quot;</span>,<br>    render: h =&gt; h(App)<br>&#125;);<br></code></pre></td></tr></table></figure><p>index.html：使用 ejs 语法判断所处环境，控制是否加载文件</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;%=</span><span class="ruby"> htmlWebpackPlugin.options.title </span><span class="xml">%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-comment">&lt;!-- 判断当前环境 --&gt;</span></span><br><span class="xml">        &lt;%</span><span class="ruby"> <span class="hljs-keyword">if</span>(process.env.NODE_ENV===<span class="hljs-string">&#x27;production&#x27;</span>)&#123;</span><span class="xml">%&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./prodGlobalConfig.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">        &lt;%</span><span class="ruby"> &#125;</span><span class="xml">%&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
